[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Kontak Penulis",
    "section": "",
    "text": "Modul ini ditulis oleh Dany Laksono pada Tahun 2022. Penulis dapat ditemukan di LinkedIn, Twitter, atau kontak langsung melalui email di danylaksono@ugm.ac.id"
  },
  {
    "objectID": "about.html#hubungi-penulis",
    "href": "about.html#hubungi-penulis",
    "title": "Kontak Penulis",
    "section": "",
    "text": "Modul ini ditulis oleh Dany Laksono pada Tahun 2022. Penulis dapat ditemukan di LinkedIn, Twitter, atau kontak langsung melalui email di danylaksono@ugm.ac.id"
  },
  {
    "objectID": "about.html#afiliasi",
    "href": "about.html#afiliasi",
    "title": "Kontak Penulis",
    "section": "Afiliasi",
    "text": "Afiliasi\nKelompok Riset Geoinformatika dan Infrastruktur Informasi Geospasial (GIIG) merupakan bagian dari Departemen Teknik Geodesi, Fakultas Teknik Universitas Gadjah Mada. Riset-riset yang dikembangkan oleh kelompok bidang keilmuan ini diantaranya adalah pada bidang geoinformatika, inovasi metode akuisisi dan pengolahan data pertanahan, pengembangan perangkat lunak opensource berbasis desktop dan web, geovisualisasi dan visual analytics, serta infrastruktur informasi geospasial. Kunjungi website Departemen Teknik Geodesi untuk informasi lebih lanjut."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Panduan Praktis Membangun WebGIS",
    "section": "",
    "text": "Modul singkat ini berisi panduan langkah-demi-langkah untuk membangun sebuah WebGIS: Aplikasi sistem informasi geospasial yang dapat diakses melalui media internet. Tentunya tidak semua konten geospasial yang diakses melalui media internet dapat kita sebut sebagai sebuah ‘WebGIS’ (lihat penjelasan singkat tentang ini di bab berikutnya). Selain itu, terdapat berbagai ragam bentuk dan jenis perangkat lunak yang dapat digunakan untuk membangun sebuah WebGIS. Pun demikian, tiap orang mungkin memiliki pemahaman yang berbeda mengenai apa dan bagaimana sebuah webGIS harus dibangun. Demikian luas cakupan istilah ‘WebGIS’ yang berkembang saat ini, sehingga kita dapat temukan padanannya dalam hampir segala bentuk sesuatu yang kita sebut sebagai ‘Internet’ itu sendiri.\n\n\n\n\n\n“A surveyor with total station in early days of America overseeing the land in the style of Monet” (DALL-E)\n\n\n\n\n\n\nUntuk itu, modul ini hanya akan menyajikan seiris panduan mengenai bagaimana membangun sebuah WebGIS. Modul ini akan memberikan panduan yang sangat opinionated dari sudut pandang penulis. Selain itu, modul ini juga hanya akan berfokus pada bagaimana membangun sebuah WebGIS. Anda tidak akan menjumpai banyak pembahasan teoritis di sini. Fokus dari modul ini adalah to get you started developing a webgis. Akan ada petunjuk di sana dan di sini tentang di mana Anda dapat menemukan pembahasan lebih lengkap tentang teori dari latihan yang dimaksud. Lihat pada sub-bab Bagaimana menggunakan modul ini? di bawah."
  },
  {
    "objectID": "index.html#tentang-modul-ini",
    "href": "index.html#tentang-modul-ini",
    "title": "Panduan Praktis Membangun WebGIS",
    "section": "",
    "text": "Modul singkat ini berisi panduan langkah-demi-langkah untuk membangun sebuah WebGIS: Aplikasi sistem informasi geospasial yang dapat diakses melalui media internet. Tentunya tidak semua konten geospasial yang diakses melalui media internet dapat kita sebut sebagai sebuah ‘WebGIS’ (lihat penjelasan singkat tentang ini di bab berikutnya). Selain itu, terdapat berbagai ragam bentuk dan jenis perangkat lunak yang dapat digunakan untuk membangun sebuah WebGIS. Pun demikian, tiap orang mungkin memiliki pemahaman yang berbeda mengenai apa dan bagaimana sebuah webGIS harus dibangun. Demikian luas cakupan istilah ‘WebGIS’ yang berkembang saat ini, sehingga kita dapat temukan padanannya dalam hampir segala bentuk sesuatu yang kita sebut sebagai ‘Internet’ itu sendiri.\n\n\n\n\n\n“A surveyor with total station in early days of America overseeing the land in the style of Monet” (DALL-E)\n\n\n\n\n\n\nUntuk itu, modul ini hanya akan menyajikan seiris panduan mengenai bagaimana membangun sebuah WebGIS. Modul ini akan memberikan panduan yang sangat opinionated dari sudut pandang penulis. Selain itu, modul ini juga hanya akan berfokus pada bagaimana membangun sebuah WebGIS. Anda tidak akan menjumpai banyak pembahasan teoritis di sini. Fokus dari modul ini adalah to get you started developing a webgis. Akan ada petunjuk di sana dan di sini tentang di mana Anda dapat menemukan pembahasan lebih lengkap tentang teori dari latihan yang dimaksud. Lihat pada sub-bab Bagaimana menggunakan modul ini? di bawah."
  },
  {
    "objectID": "index.html#prasyarat",
    "href": "index.html#prasyarat",
    "title": "Panduan Praktis Membangun WebGIS",
    "section": "Prasyarat",
    "text": "Prasyarat\nTidak ada prasyarat khusus untuk dapat mengikuti semua materi pada modul ini. Anda dapat langsung terjun mengikuti langkah-langkah yang terdapat pada modul ini satu-persatu sampai Anda dapat membangun WebGIS sendiri. Meskipun demikian, pengetahuan akan beberapa poin berikut diperlukan untuk membantu Anda dalam memahami apa sebenarnya yang terjadi di sana:\n\nDasar-dasar tentang elemen-elemen HTML dan Document Object Model (DOM) pada sebuah halaman web\nPengetahuan tentang hal ini akan membantu ketika Anda menggunakan React nantinya. Elemen-elemen pada React mengacu pada elemen-elemen HTML, sehingga sedikit banyak Anda perlu memahami hal tersebut sebelum menggunakannya.\nJenis dan maksud dari syntax bahasa CSS (Cascading Style Sheets)\nKita akan menggunakan Tailwind, sebuah framework yang digunakan untuk membangun Style berdasarkan syntax CSS. Pada saat menggunakan Tailwind, Anda akan terbantu dengan mengenali maksud dari syntax yang kita gunakan.\nPrinsip-prinsip bahasa pemrograman, khususnya menggunakan Javascript\nBarangkali tidak ada web modern yang tidak menggunakan Javascript. Kita akan menggunakan beberapa library Javascript seperti React dan NextJS, serta menggunakan mesin Javascript (NodeJS) untuk membangun webGIS nantinya. Library peta (WebMap) yang kita gunakan, MaplibreJS, juga merupakan salah satu framework berbasis Javascript.\nDasar-dasar Version Control System, khususnya Git dan Github\nSepanjang berbagai latihan pada modul ini, kita akan menggunakan Github untuk menyimpan kode yang kita buat, melakukan versioning, serta mempublikasikan hasil pekerjaan kita. Untuk itu, pengetahuan dasar tentang Git dan Github akan sangat membantu. Meskipun demikian, sedikit teori mengenai cara kerja Version Control System dan khususnya Git akan diberikan di bab selanjutnya sebagai pengantar.\nPengetahuan mengenai WebMap Library dan Slippy Map secara umum Data spasial dengan segala ke’spesial’annya, memerlukan penanganan khusus ketika disajikan melalui internet. Library WebMap dibangun dari Javascript untuk memudahkan data dan informasi ini ditampilkan di sebuah halaman web. Pemahaman mengenai Slippy map (bagaimana data geospasial disusun untuk ditampilkan di internet) akan menjadi modal yang berguna pada saat melaksanakan latihan-latihan ini.\n\n\n\n\n\n\n\nJangan Takut Memulai!\n\n\n\n\n\n\nJangan khawatir jika Anda merasa poin-poin di atas terdengar sangat asing. Dengan mengikuti langkah demi langkah, Anda akan menemukan konteks dari beberapa istilah tersebut pada modul ini. Kerjakan lebih dulu latihan yang diberikan, kemudian kembangkan perlahan. Bukankah belajar menyelam jadi mustahil jika Anda tidak berani sama sekali menyentuh air? 😁"
  },
  {
    "objectID": "index.html#garis-besar-materi",
    "href": "index.html#garis-besar-materi",
    "title": "Panduan Praktis Membangun WebGIS",
    "section": "Garis Besar Materi",
    "text": "Garis Besar Materi\nSetelah menyelesaikan modul ini, Anda akan dapat membuat sebuah WebGIS yang kurang lebih terlihat seperti berikut: https://next-webgis.vercel.app/.\nKita akan membangun dari dasar sebuah WebGIS yang menampilkan peta dasar (basemap) dan data geospasial lain dalam bentuk vector tiles. Berikut adalah garis besar dari apa yang akan kita pelajari:\n\nMenyiapkan lingkungan development\nMenggunakan Github untuk Version Control System\nMembangun Web dengan NextJS\nMengatur antarmuka Web dengan Tailwind\nMenggunakan MaplibreJS\nMengatur dan menggunakan vector tiles\n\nKarena bersifat ringkas, sangat mungkin apabila banyak terdapat materi yang diperlukan namun tidak tercakup pada modul ini. Untuk itu, pembaca disarankan untuk menggali secara mandiri dari sumber-sumber lain. Kontak penulis tertera pada bagian lain panduan ini apabila diperlukan diskusi lebih lanjut mengenai materi di dalam maupun di luar cakupan modul ini."
  },
  {
    "objectID": "index.html#bagaimana-menggunakan-modul-ini",
    "href": "index.html#bagaimana-menggunakan-modul-ini",
    "title": "Panduan Praktis Membangun WebGIS",
    "section": "Bagaimana menggunakan modul ini?",
    "text": "Bagaimana menggunakan modul ini?\nTentunya, cara tiap individu untuk belajar hal baru berbeda-beda. Gunakan pendekatan manapun yang menurut Anda paling sesuai (_ runtut, atau skimming, atau skipping_..). Salah satu cara belajar yang dapat Anda gunakan adalah seperti berikut:\n\n\n\n\nflowchart LR\nA((Execute)) --&gt; B((Break))\nB --&gt; C((Reflect))\nC --&gt; A\n\n\n\n\n\nPenjelasannya adalah sebagai berikut:\n\nEXECUTE\nBaca dan ikuti semua langkah-langkah yang ada pada tutorial tersebut. Kerjakan sedetil mungkin. Jangan khawatir apabila Anda merasa belum paham pada beberapa langkah. Lanjutkan saja, tetapi berikan batasan: entah berdasarkan waktu (misalnya, 20 menit) atau berdasarkan tahap tertentu pada tutorial tersebut, kemudian lanjutkan lagi ke tahap BREAK di bawah ini.\nPada satu titik, mungkin Anda merasa telah mengikuti seluruh panduan yang ada dengan benar, namun Anda tetap tidak dapat melanjutkannya karena menjumpai error. Pada titik ini, lanjutkan ke tahap BREAK.\nBREAK\nBreak di sini lebih tepat jika tidak diterjemahkan dengan ‘beristirahat’, akan tetapi ‘rusak’. Pada titik dimana Anda berhenti meng-eksekusi tutorial (baik karena error ataupun berhasil sampai pada titik tertentu), rubahlah bagian-bagian kode yang telah Anda ikuti dengan baik ini.\nJika Anda berhenti meng-eksekusi karena error, inilah saat untuk melakukan debugging. Cari tahu apa yang menyebabkan program tersebut mengalami error. Luangkan waktu sebanyak mungkin\nJika Anda berhenti meng-eksekusi setelah sampai pada tahap atau batasan waktu tertentu, luangkan waktu (misalnya 10 menit) untuk merubah kode yang telah membuat Anda sampai pada titik tersebut. Ganti beberapa parameter, misalnya, atau lakukan perubahan pada urutan kode, atau lainnya. Dengan demikian, Anda benar-benar akan paham apa yang terjadi pada kode Anda tersebut.\nPastikan bahwa Anda memiliki salinan dari kode sebelum Anda melakukan modifikasi. Version Control System (VCS) yang akan kita bahas di bab berikutnya dapat digunakan untuk keperluan ini.\nREFLECT\nInvestigasi: apa yang berubah setelah kode dimodifikasi? Tahap ini adalah tahap enrichment: Anda dapat melakukan browsing untuk mencari tahu lebih jauh, misalnya, tentang bagian kode tertentu yang terdapat pada tutorial yang sudah Anda ikuti. Anda juga dapat mencari variasi dari algoritma atau penjelasan teori yang lebih mendalam.\nSekali lagi, batasi waktu untuk eksplorasi, dan setelah selesai, kembali pada point ‘EXECUTE’ dan teruskan tutorial yang Anda ikuti sampai selesai.\n\n\n\n\n\n\n\nSedikit tips untuk mengatur waktu\n\n\n\nAplikasi seperti Pomodoro (misalnya, https://pomofocus.io/) dapat membantu Anda untuk mengatur waktu sambil tetap memperhatikan kapan kita mampu untuk tetap fokus. Karena terbatasnya Attention Span kita, tetap luangkan waktu untuk beristirahat sejenak diantara siklus di atas.\nAda banyak varian dari metode Pomodoro ini, misalnya seperti ForestApp.\n\n\nTentu, ini hanya salah satu pendekatan saja. Gunakan zona belajar yang menurut Anda paling nyaman, dan rutinkan hal tersebut. Selamat belajar!\n\n\n\nCara terbaik untuk belajar adalah belajar dari kesalahan"
  },
  {
    "objectID": "index.html#selanjutnya-apa",
    "href": "index.html#selanjutnya-apa",
    "title": "Panduan Praktis Membangun WebGIS",
    "section": "Selanjutnya Apa?",
    "text": "Selanjutnya Apa?\n\n\n\n\n\n\n“Tutorial hell with the style of Persistence of Memory by Dali” (StableDiffusion)\n\n\n\n\n\n\nJangan terjebak pada “Tutorial Hell”!\n\n\n\n\nSetelah Anda menyelesaikan satu tutorial, fokuslah untuk banyak-banyak berlatih dan menghasilkan produk ketimbang terus-menerus mengikuti berbagai tutorial yang sama. Cobalah untuk membangun sendiri sebuah produk yang Anda inginkan. Rancang, Kerjakan, dan Publikasikan!\n\n\n\n\nMemiliki satu proyek kecil tiap minggu (‘Weekend Projects’) akan sangat membantu. Tidak harus sebuah proyek besar. Cukup bagian kecil dari tutorial yang Anda ikuti, misalnya. Kata-kata ‘Practice Makes Perfect’ mungkin terdengar klasik, but it works."
  },
  {
    "objectID": "index.html#tentang-ilustrasi",
    "href": "index.html#tentang-ilustrasi",
    "title": "Panduan Praktis Membangun WebGIS",
    "section": "Tentang Ilustrasi",
    "text": "Tentang Ilustrasi\nIlustasi pada modul ini dibuat menggunakan AI: Midjourney, Stable Diffusion, Dreamlike Diffusion dan Dall-E. Caption pada gambar-gambar ilustrasi tersebut merupakan prompt yang diberikan pada model AI untuk menghasilkan gambar-gambar ini."
  },
  {
    "objectID": "index.html#lisensi",
    "href": "index.html#lisensi",
    "title": "Panduan Praktis Membangun WebGIS",
    "section": "Lisensi",
    "text": "Lisensi\nModul ini berada di bawah lisensi CC BY-SA 4.0."
  },
  {
    "objectID": "2_nextjs/index.html",
    "href": "2_nextjs/index.html",
    "title": "Membangun Web dengan NextJS dan TailwindCSS",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "2_nextjs/index.html#instalasi-nextjs",
    "href": "2_nextjs/index.html#instalasi-nextjs",
    "title": "Membangun Web dengan NextJS dan TailwindCSS",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "3_maplibre/index.html",
    "href": "3_maplibre/index.html",
    "title": "WebGIS pada NextJS dengan Maplibre",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "3_maplibre/index.html#instalasi-maplibre",
    "href": "3_maplibre/index.html#instalasi-maplibre",
    "title": "WebGIS pada NextJS dengan Maplibre",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "1_persiapan/index.html",
    "href": "1_persiapan/index.html",
    "title": "Menyiapkan Lingkungan Development WebGIS",
    "section": "",
    "text": "“Beautiful illustration of a man using laptop sitting in his bed looking outside the window. Anime manga style, aesthetic, scene from the movie ‘Your Name’, Makoto Shinkai” (StableDiffusion)"
  },
  {
    "objectID": "1_persiapan/index.html#tujuan",
    "href": "1_persiapan/index.html#tujuan",
    "title": "Menyiapkan Lingkungan Development WebGIS",
    "section": "Tujuan",
    "text": "Tujuan\nTujuan dari bab ini adalah ‘setting the stage’ alias menyiapkan panggung yang di atasnya akan kita bangun WebGIS. Setelah menyelesaikan bab ini, Anda akan memiliki satu lingkungan development yang terintegrasi dengan berbagai perangkat untuk keperluan pembangunan sebuah Fullstack WebGIS, baik pada sisi Frontend maupun Backend. Anda juga diharapkan mampu untuk menggunakan perangkat Version Control System untuk menyimpan dan mempublikasikan kode yang dibuat pada latihan ini dalam sebuah repository."
  },
  {
    "objectID": "1_persiapan/index.html#ringkasan-materi",
    "href": "1_persiapan/index.html#ringkasan-materi",
    "title": "Menyiapkan Lingkungan Development WebGIS",
    "section": "Ringkasan Materi",
    "text": "Ringkasan Materi\nTerdapat dua bagian utama dari bab ini, yaitu:\n\nInstalasi perangkat lunak, dan,\nPengaturan version control system melalui Git dan Github.\n\nHasil akhir dari latihan bagian pertama ini adalah komputer atau laptop yang Anda gunakan telah terinstall dengan berbagai perangkat yang diperlukan untuk membangun sebuah webGIS, sedangkan hasil akhir dari bagian kedua adalah ini: Anda memiliki sebuah akun Github dan mampu untuk melakukan Pull, Commit dan Push pada sebuah repository Github."
  },
  {
    "objectID": "1_persiapan/git-dan-github.html",
    "href": "1_persiapan/git-dan-github.html",
    "title": "Git dan Github",
    "section": "",
    "text": "Git merupakan sistem Source Code Management (SCM) dan Version Control 1 yang bersifat bebas dan terbuka (free and open source). Git didesain untuk memudahkan manajemen kode dalam skala kecil hingga skala besar, sambil tetap menjaga kecepatan proses yang dibutuhkan. Pada git, berkas kode aplikasi disimpan dalam sebuah ‘repository’. Setiap repository pada sistem Git merupakan penyimpanan kode mandiri yang memiliki kemampuan pelacakan dan history (lihat penjelasan tentang version control di samping). Git juga memungkinkan pelacakan dari banyak kontributor sekaligus.1 Version Control adalah aplikasi yang digunakan untuk merekam dan melacak tiap perubahan yang terjadi pada sebuah berkas dan siapa yang melakukan perubahan tersebut. Apabila Anda menggunakan Google Docs untuk mengedit sebuah berkas dokumen, maka ini adalah bentuk sederhana dari sebuah Version Control\n\n\n\n\n\nGithub merupakan layanan repository Git dengan berbagai fungsionalitasnya ditambah dengan fungsi-fungsi lain yang memperkaya manajemen kode pada Github. Karena kelengkapan fungsi dan sifatnya yang gratis inilah maka Github seringkali dipercaya untuk menyimpan kode dari berbagai perangkat lunak Open Source, dimana Github memungkinkan semua orang untuk turut berkontribusi pada suatu project.\n\n\n\n\nDengan demikian, dapat dikatakan bahwa Github adalah salah satu perangkat lunak yang menggunakan prinsip Git dalam manajemen kode perangkat lunak. Selain Github, ada juga perangkat lain seperti Gitlab dan Bitbucket. Pada modul ini kita akan menggunakan Github karena adopsinya yang demikian luas.\n\n\n\n\n\n\n\n“Cinematic, Realistic, Ray tracing, Scene from Fantastic Beast movie, Octopus monster attacking town” (StableDiffusion)\n\n\n\n\n\nSalah satu fitur Github yang sangat menguntungkan dalam pembuatan halaman web adalah: Github dapat digunakan sebagai sebuah hosting gratis, dengan sebuah alamat domain yang juga gratis (namapengguna.github.io). Pada sub-bab ini kita akan membahas bagaimana membuat sebuah repository Github serta menggunakannya untuk menyimpan beberapa berkas sederhana. Lebih lanjut nanti pada modul ini, kita akan menggunakan Github untuk menyimpan dan mempublikasi aplikasi WebGIS hasil pekerjaan kita.\n\n\n\n\n\n\nMengapa kita memerlukan Git?\n\n\n\nBanyak pertanyaan mungkin muncul ketika Anda mendengar bahwa fungsi dari sebuah Version Control System adalah untuk merekam perubahan pada sebuah dokumen. Bukankah apabila kita menggunakan penyimpanan seperti Google Drive atau Dropbox, fitur yang sama juga dapat kita jumpai?\nJawaban sederhana untuk pertanyaan tersebut adalah: Git lebih dari sekedar sistem untuk melacak perubahan pada berkas. Pernahkah Anda melakukan editing sebuah dokumen secara bersamaan dengan ratusan atau bahkan ribuan orang sekaligus? Bagaimana Anda memastikan bahwa editing yang dilakukan oleh orang tersebut valid dan layak digunakan pada dokumen Anda? Siapa yang bertanggung-jawab untuk melakukan editing pada bagian tertentu di dokumen Anda?\n\n\n\n\nGambar 1. Repository Github QGIS\n\n\n\nGit menyediakan fitur untuk memastikan editing kode dapat dilakukan secara kolaboratif oleh banyak kontributor sekaligus (Lihat contohnya pada repository QGIS di Gambar 1). Git memfasilitasi suatu alur version control system yang memastikan kode dapat dibaca dan dirubah oleh banyak orang sekaligus menjamin validitas kode tersebut. Sekali lagi, sebuah aplikasi terdiri dari banyak komponen. Sebuah aplikasi dalam skala menengah saja mungkin memiliki ratusan bahkan ribuan file berbeda. Kita memerlukan sebuah sistem untuk mengatur bagaimana editing dilakukan pada berkas-berkas tersebut sambil memastikan bahwa aplikasi tetap dapat berjalan seperti biasa. Di samping itu, Git juga dilengkapi dengan berbagai fungsi lain untuk project management, seperti issue reporting, milestone, dan lain sebagainya yang memang dikhususkan untuk pembangunan aplikasi."
  },
  {
    "objectID": "1_persiapan/git-dan-github.html#tentang-git",
    "href": "1_persiapan/git-dan-github.html#tentang-git",
    "title": "Git dan Github",
    "section": "",
    "text": "Git merupakan sistem Source Code Management (SCM) dan Version Control 1 yang bersifat bebas dan terbuka (free and open source). Git didesain untuk memudahkan manajemen kode dalam skala kecil hingga skala besar, sambil tetap menjaga kecepatan proses yang dibutuhkan. Pada git, berkas kode aplikasi disimpan dalam sebuah ‘repository’. Setiap repository pada sistem Git merupakan penyimpanan kode mandiri yang memiliki kemampuan pelacakan dan history (lihat penjelasan tentang version control di samping). Git juga memungkinkan pelacakan dari banyak kontributor sekaligus.1 Version Control adalah aplikasi yang digunakan untuk merekam dan melacak tiap perubahan yang terjadi pada sebuah berkas dan siapa yang melakukan perubahan tersebut. Apabila Anda menggunakan Google Docs untuk mengedit sebuah berkas dokumen, maka ini adalah bentuk sederhana dari sebuah Version Control\n\n\n\n\n\nGithub merupakan layanan repository Git dengan berbagai fungsionalitasnya ditambah dengan fungsi-fungsi lain yang memperkaya manajemen kode pada Github. Karena kelengkapan fungsi dan sifatnya yang gratis inilah maka Github seringkali dipercaya untuk menyimpan kode dari berbagai perangkat lunak Open Source, dimana Github memungkinkan semua orang untuk turut berkontribusi pada suatu project.\n\n\n\n\nDengan demikian, dapat dikatakan bahwa Github adalah salah satu perangkat lunak yang menggunakan prinsip Git dalam manajemen kode perangkat lunak. Selain Github, ada juga perangkat lain seperti Gitlab dan Bitbucket. Pada modul ini kita akan menggunakan Github karena adopsinya yang demikian luas.\n\n\n\n\n\n\n\n“Cinematic, Realistic, Ray tracing, Scene from Fantastic Beast movie, Octopus monster attacking town” (StableDiffusion)\n\n\n\n\n\nSalah satu fitur Github yang sangat menguntungkan dalam pembuatan halaman web adalah: Github dapat digunakan sebagai sebuah hosting gratis, dengan sebuah alamat domain yang juga gratis (namapengguna.github.io). Pada sub-bab ini kita akan membahas bagaimana membuat sebuah repository Github serta menggunakannya untuk menyimpan beberapa berkas sederhana. Lebih lanjut nanti pada modul ini, kita akan menggunakan Github untuk menyimpan dan mempublikasi aplikasi WebGIS hasil pekerjaan kita.\n\n\n\n\n\n\nMengapa kita memerlukan Git?\n\n\n\nBanyak pertanyaan mungkin muncul ketika Anda mendengar bahwa fungsi dari sebuah Version Control System adalah untuk merekam perubahan pada sebuah dokumen. Bukankah apabila kita menggunakan penyimpanan seperti Google Drive atau Dropbox, fitur yang sama juga dapat kita jumpai?\nJawaban sederhana untuk pertanyaan tersebut adalah: Git lebih dari sekedar sistem untuk melacak perubahan pada berkas. Pernahkah Anda melakukan editing sebuah dokumen secara bersamaan dengan ratusan atau bahkan ribuan orang sekaligus? Bagaimana Anda memastikan bahwa editing yang dilakukan oleh orang tersebut valid dan layak digunakan pada dokumen Anda? Siapa yang bertanggung-jawab untuk melakukan editing pada bagian tertentu di dokumen Anda?\n\n\n\n\nGambar 1. Repository Github QGIS\n\n\n\nGit menyediakan fitur untuk memastikan editing kode dapat dilakukan secara kolaboratif oleh banyak kontributor sekaligus (Lihat contohnya pada repository QGIS di Gambar 1). Git memfasilitasi suatu alur version control system yang memastikan kode dapat dibaca dan dirubah oleh banyak orang sekaligus menjamin validitas kode tersebut. Sekali lagi, sebuah aplikasi terdiri dari banyak komponen. Sebuah aplikasi dalam skala menengah saja mungkin memiliki ratusan bahkan ribuan file berbeda. Kita memerlukan sebuah sistem untuk mengatur bagaimana editing dilakukan pada berkas-berkas tersebut sambil memastikan bahwa aplikasi tetap dapat berjalan seperti biasa. Di samping itu, Git juga dilengkapi dengan berbagai fungsi lain untuk project management, seperti issue reporting, milestone, dan lain sebagainya yang memang dikhususkan untuk pembangunan aplikasi."
  },
  {
    "objectID": "1_persiapan/git-dan-github.html#prinsip-dan-cara-kerja-github",
    "href": "1_persiapan/git-dan-github.html#prinsip-dan-cara-kerja-github",
    "title": "Git dan Github",
    "section": "Prinsip dan Cara Kerja Github",
    "text": "Prinsip dan Cara Kerja Github\nBagian berikut akan menjelaskan secara naratif tentang bagaimana Github sebagai sebuah Version Control System bekerja untuk merekam perubahan pada kode dan memungkinkan kolaborasi antar developer untuk membangun sebuah perangkat lunak. Anda tidak harus memahami sub-bab ini untuk melanjutkan ke sub-bab berikutnya. Anggaplah bagian ini sebagai rujukan yang dapat Anda buka sewaktu-waktu apabila Anda belum memahami tentang cara kerja Github. Jika mau, Anda dapat langsung melompat ke bagian Praktek Menggunakan Github untuk memulai.\nKita akan gunakan ilustrasi berikut sebagai pengantar:\n\n\n\n\nGambar 2. Sumber: Medium.com\n\n\n\nAda 3 bagian utama dari gambar di atas, yaitu:\n\nDeveloper A. Anggap ini adalah Anda dan komputer Anda, tempat Anda mengembangkan aplikasi WebGIS ini\nRemote Repository. Repository yang tersimpan pada Github (di server Github). Remote repository ini dapat terdiri dari berbagai cabang (branch) yang merupakan rekaman untuk versi dokumen yang berbeda.\nDeveloper B. Rekan Anda yang membangun aplikasi WebGIS yang sama pada repository yang sama\n\nDeveloper A dan Developer B bekerja pada komputer masing-masing. Remote repository merupakan tempat penyimpanan kode pada server Github yang dapat diakses pada alamat https://github.com/&lt;nama pengguna&gt;/&lt;nama repository&gt;. Gambar di atas menjelaskan beberapa perintah Github yang digunakan selama proses pembangunan aplikasi. Berikut adalah alur kerja Github berdasarkan gambar di atas:\n\nAnda membuat repository online pada Github. Ini adalah bagian remote repository berwarna abu-abu pada gambar di atas\nAnda melakukan cloning, yaitu membuat salinan repository tersebut di komputer Anda. Proses cloning ini adalah garis berwarna hijau. Salinan hasil clone yang terdapat di komputer Anda disebut sebagai sebuah working copy. Perintah yang digunakan untuk melakukan cloning adalah git clone.\nPada working copy inilah Anda melakukan perubahan kode: menambah atau menghapus baris, dan seterusnya. Perubahan ini hanya terjadi di komputer Anda dan sama sekali belum merubah kode yang tersimpan pada repository Github.\nUntuk merekam perubahan pada kode yang terjadi di komputer Anda, Anda perlu untuk memberi tahu Git pada saat Anda ingin merekam perubahan tersebut. Perekaman ini akan membuat penyimpanan lokal sementara yang disebut dengan nama staging area. Untuk menambahkan perubahan kode yang Anda lakukan pada staging area, digunakan perintah git add.\nTahap final sebelum mendorong kode dari komputer Anda ke repository Github adalah membuat sebuah commit. Commit berisi rekaman tentang apa saja yang berubah sejak commit terakhir Anda buat pada staging area. Dengan demikian, dapat dianggap bahwa sebuah commit adalah titik pemberhentian terakhir rekaman perubahan kode sebelum diunggah pada repository Github. Untuk membuat commit dari staging area, digunakan perintah git commit\nHasil dari Commit adalah sebuah berkas yang berisi seluruh rekaman perubahan yang Anda lakukan pada kode Anda sejak commit sebelumnya dibuat, berikut dengan pesan (commit message) yang Anda tuliskan pada rekaman tersebut. Sekali lagi, hasil commit ini masih ada di komputer Anda dalam bentuk Local Repository. Untuk menunggah Local repository ke Repository Github, digunakan perintah git push.\nHasil dari Git Push adalah sinkronisasi antara kode yang terdapat pada local repository dan repository pada Github.\n\nPerlu dicatat bahwa proses no. 1 sampai no. 7 pada Gambar 2 di atas terjadi pada sebuah branch atau cabang dari repository di Github. Pemilik repository nantinya dapat menggabungkan berbagai branch yang berbeda menjadi sebuah repository utama (seringkali disebut sebagai main atau master) sebelum merilis aplikasi tersebut. Gambar 3 berikut memberikan ilustrasi proses tersebut:\n\n\n\n\nGambar 3. Penggabungan Branch pada Repository Github\n\n\n\nPada contoh di atas, Repository Github ‘WebGIS Geodesi’ dimiliki oleh Developer C sebagai Admin, dengan Developer A sebagai salah satu pemilik hak akses. Repository tersebut berada pada alamat https://github.com/developerc/webgisgeodesi. Developer A mengunggah update kode yang ditulisnya dari repository lokal ke repository Github ‘WebGIS Geodesi’ pada branch ‘layout’ dengan mengikuti proses sebelumnya (no. 1-7 di atas).\nDeveloper A kemudian meminta agar bagian kode yang ditulisnya digabungkan dengan kode utama pada repository ‘main’. Permintaan penggabungan kode ini disebut dengan nama Pull Request. Selanjutnya, Developer C sebagai admin memeriksa kode yang ditulis oleh Developer A, kemudian setelah memastikan kesesuaian kode tersebut, Admin menggabungkan pull request tersebut ke Repository Utama di Github menggunakan Git Merge. Skenario penggabungan kode dengan cara semacam ini dapat kita sebut sebagai Skenario Pertama.\nBagaimana jika ada developer lain (misalnya Developer B), yang bukan merupakan admin dari repository tersebut namun ingin menyumbangkan kode buatannya? Bagaimana kalau Developer B ingin menambahkan sebuah peta pada halaman WebGIS Geodesi? Developer B tetap dapat melakukan hal-hal tersebut melalui mekanisme yang kita sebut saja sebagai Skenario Kedua. Kurang lebih seperti berikut:\nDeveloper B membuat fork dari Repository Github ‘WebGIS Geodesi’ ke dalam akun miliknya, sehingga kini Developer B memiliki salinan repository WebGIS Geodesi pada akun githubnya sendiri pada alamat https://github.com/developerb/webgisgeodesi_2. Developer B dapat melakukan proses yang sama seperti Developer A pada repositorynya sendiri (langkah 1-7 di atas) pada branch ‘peta’ kemudian mengajukan sebuah Pull-Request antar-repository, dari Repository Github miliknya ke repository Github milik Developer C. Admin Repository asal kemudian dapat melakukan penggabungan Pull-request (seringkali disingkat sebagai ‘PR’) ke dalam kode utama di repository asal pada branch main.\nNah, sampai di sini mungkin akan muncul pertanyaan: bagaimana kalau Developer A telah lebih dulu mengajukan Pull-request yang diterima dalam repository asal, dalam keadaan Developer B belum selesai menulis kodenya? Konsekuensi untuk ini adalah kode yang berada di repository Developer B belum mengandung perubahan yang telah dibuat oleh Developer A, sehingga ketika nantinya Developer B membuat PR, kemungkinan akan terjadi ‘bentrok’ karena Developer A maupun Developer B merubah bagian kode yang sama.\nDi sinilah pentingnya bagian kedua dari Gambar 2: Sebelum Developer B akan mengunggah kodenya dalam bentuk Git Push ke repositorynya sendiri, ia perlu mengunduh update apapun yang terjadi pada repository asal milik Developer C (dalam Github, repository asal ini disebut sebagai upstream). Developer B perlu menggunakan perintah Git Pull untuk keperluan ini. Dengan mengunduh status terakhir dari repository Upstream, Developer B dapat menyelesaikan semua konflik antara kode yang berada di repository lokal komputernya dengan repository upstream. Setelah konflik diselesaikan, barulah kemudian ia mengikuti langkah selanjutnya (Git Add - Git Commit - Git Push) ke repositorynya sendiri seperti yang disebutkan di atas. Terakhir, Developer B kemudian mengajukan Pull Request dari repository Github miliknya (disebut sebagai origin) ke repository asal sehingga Developer C dapat menggabungkannya ke kode utama.\nApa sebenarnya yang ‘direkam’ pada setiap commit?\nSebuah commit yang dihasilkan dari tiap proses git add - git commit - git push akan merekam setiap perubahan yang terjadi pada semua file di repository lokal. Contoh sebuah commit adalah seperti di bawah ini. Warna merah menunjukkan baris yang dihapus, sedangkan warna hijau menunjukkan penambahan baris kode baru. Pada contoh Gambar 4 di bawah terdapat 17 berkas yang dirubah, dengan total penambahan sejumlah 763 baris dan penghapusan kode sejumlah 418 baris.\n\n\n\n\nGambar 4. Contoh sebuah Commit pada Github\n\n\n\nSetiap commit memiliki ID yang terdiri dari 40 karakter (42f74812daff3f03798335cc4dd6fee2a9ac2459 untuk contoh di atas) yang merekam setiap perubahan pada versi tersebut. Mengapa sebuah Commit begitu penting? Commit ini adalah sebuah checkpoint. Anda dapat kembali ke versi commit manapun yang Anda inginkan dengan memanggil IDnya.\n\n\n\n\n\n\nMengapa begitu rumit?\n\n\n\nTerdengar complicated? Langkah-langkah tersebut di atas dirancang untuk memastikan proses penulisan kode hingga rilis aplikasi berjalan dengan lancar meskipun melibatkan rangkaian yang sangat kompleks dengan jumlah developer yang banyak. Faktanya, adanya Git dan khususnya Github selama satu dekade terakhir telah mendorong pertumbuhan perangkat lunak Open Source di seluruh dunia.\nIngat, Anda tidak harus memahami seluruh narasi di atas untuk melanjutkan pada sub-bab di bawah ini. Anda bisa kembali kapan saja pada sub-bab ini sebagai referensi."
  },
  {
    "objectID": "1_persiapan/git-dan-github.html#menggunakan-github-untuk-version-control-system",
    "href": "1_persiapan/git-dan-github.html#menggunakan-github-untuk-version-control-system",
    "title": "Git dan Github",
    "section": "Menggunakan Github untuk Version Control System",
    "text": "Menggunakan Github untuk Version Control System\nPada bagian ini kita akan mempraktekkan kedua skenario yang disebutkan di atas: membuat sebuah repository pada akun Github kita sendiri dan mempraktekkan skenario kontribusi pada akun Github user lain. Sebelum menggunakan Github, tentu terlebih dahulu kita perlu membuat akun pada website Github.com. Selain itu, kita juga perlu melakukan instalasi Git pada sistem operasi yang kita gunakan di laptop atau komputer untuk memanggil perintah-perintah Git. Dalam hal ini, kita diuntungkan dengan penggunaan Git, karena Ubuntu WSL yang merupakah sebuah distro Linux telah terintegrasi dengan berbagai utilitas untuk keperluan pembangunan perangkat lunak, termasuk Git.\nPertama, Anda harus memiliki sebuah akun Github terlebih dahulu. Jika Anda belum memiliki akun Github sebelumnya, buka halaman https://github.com/signup untuk mendaftarkan akun baru. Masukkan email yang akan dihubungkan dengan akun Github dan ikuti petunjuk pendaftaran (Gambar 5).\n\n\n\n\nGambar 5. Mendaftar akun baru pada Github\n\n\n\nLakukan pengaturan yang diperlukan untuk akun Github Anda pada halaman https://github.com/settings/profile. Jangan lupa untuk memverifikasi pendaftaran melalui email yang masuk ke akun terdaftar. Anda mungkin tidak dapat menggunakan fitur-fitur Github apabila Anda belum melakukan verifikasi akun.\n\n\n\n\n\n\nTentang nama akun Github\n\n\n\n\n\n\n\n\n\n“Shakespeare holding a rose, 18th century painting by alphonse mucha, highly detailed, intricate” (Dreamlike Diffusion)\n\n\n\n\n\n\n‘What’s in a name?’ Demikian kata Shakespeare. Anda bebas untuk menggunakan nama apapun untuk akun Github Anda. Meskipun demikian, ada baiknya Anda menggunakan nama akun yang cukup ringkas dan mudah dibaca.\n\n\n\n\nMengapa demikian? Nama akun Anda akan digunakan untuk membuat sebuah domain oleh Github (namaakun.github.io), sehingga Anda perlu mengikuti beberapa hal mendasar untuk penamaan url, seperti menghindari nama yang terlalu panjang, tidak menggunakan angka dan simbol, dan lain sebagainya. Keep it simple, smarty!\n\n\n\n\n\n\n\n\nBekerja dengan Repository Github (Skenario 1)\nSetelah memiliki akun Github, kita akan mempraktekkan bagaimana membuat sebuah repository dan menambahkan sebuah berkas kode sederhana serta melacak perubahannya. Berikut adalah langkah-langkah yang perlu Anda ikuti:\n\nPada halaman Github Anda (github.com/namaanda), klik tanda (+) pada ujung kanan atas, kemudian pilih New repository dari opsi yang muncul\n\nMasukkan nama repository yang ingin Anda buat. Untuk contoh ini, gunakan simple-webgis. Berikan deskripsi yang sesuai dan atur agar repository tersebut bersifat ‘public’. \nPada bagian pengaturan selanjutnya, tambahkan file Readme dan Atur lisensi 2 repository. \nKlik pada tombol Create Repository. Maka Anda akan dibawa pada halaman repository tersebut. Biasanya repository ini memiliki alamat https://github.com/namaanda/namarepository.\n\n2 Lisensi ini mengatur hak-hak dan kewajiban Anda sebagai pemilik repository serta semua pengguna yang memanfaatkan kode yang Anda publikasi di repository tersebut. Lihat link berikut untuk membaca lebih lengkap mengenai lisensi Open SourceHalaman repository simple-webgis yang baru saja Anda buat mungkin terlihat seperti berikut:\n\n\n\n\nGambar 6. Halaman repository simple-webgis\n\n\n\nBerikut adalah penjelasan untuk Gambar 6 di atas:\n\nAlamat URL untuk repository Anda. Apabila Anda mengatur repository ini dengan pengaturan public, maka alamat ini akan dapat diakses oleh siapapun.\nPengaturan repository. Di menu inilah nantinya Anda akan mengatur mengenai batasan akses, nama repository, maupun menghapus repository jika diperlukan.\nNama Branch. Branch atau ‘cabang’ digunakan untuk melacak versi repository pada suatu waktu tertentu. Pada contoh di atas, repository ini hanya memiliki satu buah branch, yaitu main. Kita akan membuat branch baru pada latihan berikutnya di sub-bab ini.\nTombol Kode. Tombol ini digunakan untuk menampilkan menu untuk melakukan cloning pada repository ini.\nRiwayat commit. Bagian ini akan menunjukkan Commit ID terakhir serta kapan commit tersebut dibuat.\nIsi repository. Kode yang Anda tulis akan muncul di sini.\n\nSekarang setelah Anda memiliki sebuah repository, kita akan mempraktekkan dua buah kasus seperti berikut:\n\nMengatur repository pada satu branch utama (main)\nIkuti langkah-langkah berikut:\n\nBuka konsol WSL Anda. Anda dapat memanggilnya melalui Start Menu dengan mengetikkan ‘Ubuntu’ atau ‘WSL’.\nNavigasi ke halaman profil Ubuntu Anda menggunakan perintah berikut:\ncd ~\n\nPerintah tersebut akan memindahkan direktori aktif Anda (‘change directory’) ke direktori profil Anda pada WSL.\nBuat sebuah folder baru dengan nama latihan dan masuklah ke direktori tersebut. Pada shell, ketikkan perintah berikut:\nmkdir latihan && cd latihan\n Saat ini, Anda berada pada folder latihan. Kita akan menggunakan folder ini untuk menempatkan beberapa project yang akan kita buat sepanjang latihan pada modul ini.\nKembali ke halaman repository Github Anda. Klik tombol &lt;&gt; Code, kemudian klik tombol Copy () yang terdapat di samping alamat clone \nPada Konsol WSL Anda, ketikkan perintah berikut:\ngit clone \nkemudian ‘paste’ kode yang telah Anda copy dari repository Github sebelumnya (gunakan klik kanan mouse Anda atau ctrl+v). Setelah alamat selesai dicopy, tekan Enter: \nPerintah yang baru saja Anda panggil adalah git clone, yaitu proses untuk mengkloning repository dari Github menjadi sebuah working copy di komputer Anda.\n\nSetelah perintah selesai, Anda akan mendapatkan sebuah repository lokal. Gunakan perintah ls untuk menampilkan isi dari folder latihan sekarang:  Ingat bahwa Anda juga dapat menampilkan isi dari folder tersebut pada Windows Explorer. Folder tersebut akan terletak di direktori berikut pada Windows: \nPindah ke folder simple-webgis hasil cloning, kemudian ketikkan ls untuk melihat isinya:  Perhatikan bahwa isi dari folder tersebut adalah isi yang sama dengan Repository Github yang Anda Cloning.\nKetikkan perintah berikut untuk membuka Visual Studio Code (VSCode):\n# jangan lupakan tanda titik setelah 'code'\ncode .\nCode merupakan perintah untuk membuka VSCode. Tanda titik setelah ‘code’ menunjukkan direktory yang sedang aktif, sehingga code . berarti, “buka VSCode pada direktori ini”. Perintah di atas akan membuka sebuah jendela VSCode seperti berikut: \n\nPada jendela VSCode seperti gambar di atas kita dapat melihat isi dari repository simple-webgis. Sekarang kita akan coba menambahkan sebuah berkas baru pada repository tersebut, kemudian mengirimkan pembaruan ini ke repository Github melalui mekanisme Git Push.\nUntuk itu, lakukan langkah-langkah berikut:\n\nBuat sebuah file baru pada working space lokal menggunakan VSCode. Klik kanan pada panel Explorer VSCode, kemudian pilih New File \nBerikan nama file tersebut index.html. \nIsikan baris kode berikut pada file index.html. Gunakan copy-paste. Anda tidak harus memahami kode ini sekarang. Kita akan membahas lebih detil mengenai Maplibre pada bab selanjutnya.\n\n\n\nindex.html\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\" /&gt;\n&lt;title&gt;Peta dengan Marker&lt;/title&gt;\n&lt;meta name=\"viewport\" content=\"initial-scale=1,maximum-scale=1,user-scalable=no\" /&gt;\n&lt;script src=\"https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n&lt;link href=\"https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.css\" rel=\"stylesheet\" /&gt;\n&lt;style&gt;\n    body { margin: 0; padding: 0; }\n    #map { position: absolute; top: 0; bottom: 0; width: 100%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    var map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://basemaps.cartocdn.com/gl/voyager-gl-style/style.json',\n        center: [112.56513, -6.98846],\n        zoom: 8\n    });\n\n    var marker = new maplibregl.Marker()\n        .setLngLat([112.56513, -6.98846])\n        .addTo(map);\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\nJika kita buka file index.html tersebut dengan menggunakan browser, kita akan mendapatkan tampilan seperti berikut:\n\n\n\nPada titik ini, kita telah melakukan modifikasi berkas pada sebuah Working copy dari repository Github simple-webgis. Ingat bahwa kita belum merubah sedikitpun kode yang berada pada repository Github (online). Kita akan mengunggah perubahan tersebut dengan empat langkah berikut:\n\nPENTING: Sebelum mengunggah apapun ke repository Github, terlebih dahulu kita perlu memeriksa apakah sudah terjadi perubahan di repository tersebut (misalnya karena ada penggabungan Pull Request yang dilakukan oleh developer lain). Untuk itu, gunakan perintah berikut untuk mengambil (‘pull’) perubahan tersebut ke dalam working copy kita jika ada:\n\ngit pull\n\n\nSelanjutnya, kita akan menambahkan seluruh berkas yang ada di working copy kita ke dalam staging area. Panggil perintah berikut pada shell WSL:\n\ngit add --all \nPerintah tersebut akan menambahkan semua berkas pada working copy ke dalam staging area dan mencatat semua perubahan yang terjadi pada berkas tersebut sejak commit terakhir pada repository. Tidak ada output yang keluar dari perintah ini. Kita akan melihatnya nanti pada saat melakukan commit.\n\nDi bagian inilah kita mencatatkan commit pada kode tersebut. Anggaplah commit sebagai sebuah stempel yang menyatakan bahwa perubahan ini telah mendapatkan persetujuan kita untuk dikirim ke repository Github. Sebuah commit juga disertai dengan pesan (‘message’) yang berguna untuk mengidentifikasi isi dari commit tersebut. Lakukan commit dengan memanggil perintah berikut:\n\ngit commit -am \"Menambahkan file index.html\"\nParameter setelah -am pada kode di atas adalah pesan commit. Pesan commit sangat penting untuk mengidentifikasi apa isi dari commit yang kita buat tersebut. Ingat bahwa suatu saat kita mungkin perlu untuk kembali ke titik commit ini, sehingga pesan commit yang jelas akan memudahkan kita untuk melacak perjalanan perubahan kode yang kita buat.\n\nPada konsol, dapat kita lihat bahwa Git mencatat perubahan pada kode kita serta bagian mana yang berubah. Inilah yang akan kita kirimkan pada repository online pada langkah berikutnya.\n\nTerakhir, kita akan ‘mendorong’ commit yang telah kita stempel ini ke dalam repository Github online. Gunakan perintah berikut:\n\ngit push origin main\n\nApa itu origin dan apa itu main pada perintah di atas? Origin merujuk pada repository Github yang kita miliki, yaitu untuk contoh ini adalah https://github.com/&lt;namaanda&gt;/simple-webgis. Apabila kita melakukan update untuk berkontribusi pada repository milik orang lain, kita akan menggunakan istilah upstream. Adapun main adalah branch pada repository origin yang kita tuju. Latihan menggunakan branch yang berbeda akan kita lakukan pada bagian Menggunakan Percabangan Repository di bawah ini.\n\n\n\n\n\n\nSeberapa sering kita perlu membuat commit?\n\n\n\nSetiap orang memiliki gaya masing-masing dalam melakukan commit: ada yang membuat commit untuk tiap perubahan sekecil apapun. Ada juga yang baru membuat sebuah commit setelah sebagian besar dari codenya selesai dibuat. Tidak ada aturan khusus untuk ini, tetapi gunakan panduan umum berikut: Jika perubahan tersebut penting, buatlah sebuah commit. Meskipun hanya satu-dua baris yang Anda rubah, tetapi apabila perubahan tersebut berpotensi untuk mengakibatkan aplikasi mengalami error, maka sebaiknya Anda membuat commit untuk itu.\n\n\nAnggaplah staging area sebagai tempat persinggahan sementara dari update code yang kita buat. Kita dapat meneruskannya menjadi sebuah commit, atau kita juga dapat membatalkannya dan menarik perubahan tersebut dari commit. Gambar 7 menunjukkan ilustrasi untuk proses ini\n\n\n\n\nGambar 7. Contoh alur pada staging area (Sumber: @NikkiSiapno)\n\n\n\nSekarang, buka repository Github Anda menggunakan browser. Tampilan pada Gambar 8 berikut akan menunjukkan bahwa kita telah berhasil melakukan update berkas index.html yang sebelumnya kita buat pada repository lokal di komputer kita:\n\n\n\n\nGambar 8. Tampilan repository setelah git push pertama\n\n\n\nSeluruh contoh di atas merupakan alur penggunaan Github yang mungkin cukup bagi Anda apabila Anda hanya membutuhkan Github sebagai sistem pelacak perubahan berkas. Boleh jadi Anda tidak memerlukan langkah-langkah penggunaan Github di poin selanjutnya. Akan tetapi, pemahaman mengenai bagaimana Github bekerja di sub-bab berikutnya akan sangat membantu ketika Anda nantinya menggunakan Github untuk berkolaborasi dalam sebuah proyek secara bersama-sama dengan developer lain.\n\n\nMenggunakan percabangan repository\nPada bagian ini kita akan bekerja dengan repository yang sama seperti sebelumnya, yaitu simple-webgis. Perbedaannya adalah bahwa kali ini kita akan menggunakan branch dan membuat PR - Pull Request untuk melacak dan mengatur kode yang kita tulis.\nLakukan latihan berikut:\n\nPada Shell WSL di direktory simple-webgis, ketikkan perintah berikut:\n\ngit checkout -b marker-baru\n\n\nPerintah sederhana di atas melakukan dua hal sekaligus: membuat sebuah branch baru dan berpindah ke branch tersebut. Kita dapat memeriksa branch yang sedang aktif saat ini dengan menggunakan perintah:\n\ngit branch\n\nSaat ini, terdapat dua buah branch pada repository lokal kita. Kita akan melakukan editing pada file index.html dan menggunakannya untuk melakukan update webGIS kita pada branch marker-baru.\n\nBuka file index.html pada VSCode, kemudian tambahkan baris berikut setelah definisi marker pada baris ke-27. Kode ini berfungsi untuk menambahkan marker baru pada saat tombol mouse di-klik di atas peta:\n\n\n\nindex.html\n\n    ...    \n\n    // add new marker on click  \n    map.on('click', function(e) {\n        var marker = new maplibregl.Marker()\n            .setLngLat(e.lngLat)\n            .addTo(map);\n    });\n\n    ...\n\n\n\n\n\n\n\nMemeriksa branch yang aktif di VSCode\n\n\n\nIngat bahwa saat ini kita sedang berada pada branch marker-baru? Kita dapat melihat branch yang sedang aktif melalui VSCode seperti pada gambar berikut: \n\n\n\nSelanjutnya, kita akan mengirimkan update tersebut pada repository Github. Gunakan perintah berikut secara berurutan:\n\n# mengupdate repository lokal dari repository github (branch 'main')\ngit pull origin main\n\n# menambahkan semua file ke dalam staging area\ngit add --all\n\n# membuat commit baru\ngit commit -am \"menambah marker dinamis\"\n\nPada perintah di atas, kita memberikan tambahan origin main pada perintah git pull. Mengapa demikian? Jawabannya adalah karena saat ini kita sedang berada pada branch marker-baru. Branch ini belum ada di repository Github, karena kita baru saja membuatnya pada komputer lokal kita. Karenanya, kita memeriksa update yang ada pada branch main di repository Github.\n\nLangkah selanjutnya, seperti sebelumnya, adalah mengunggah commit ini ke repository Github. Untuk itu kita gunakan perintah berikut:\n\ngit push origin marker-baru\n\nPerhatikan bahwa kita menggunakan branch marker-baru yang kita update ke repository Github. Pesan commit pada screenshot di atas menunjukkan adanya branch baru (* [new branch]) yang dibuat pada repository Github.\n\nApabila kita mengunjungi halaman repository Github kita, kita akan melihat adanya branch baru tersebut:\n\n\n\nPada halaman repository Github, kita juga dapat melihat pesan pemberitahuan bahwa kita baru saja melakukan commit pada sebuah branch, dan tombol untuk membuat sebuah Pull Request seperti berikut:\n\n\n\nKlik pada tombol Compare & Pull Request tersebut. Halaman untuk membuat sebuah Pull Request baru akan muncul seperti berikut: \n\nPada halaman ini, perhatikan bagian berikut: \nIngat penjelasan mengenai merge pada Gambar 3? Kita ingin menggabungkan (pull-request) update yang kita lakukan pada branch marker-baru ke branch main. Isi dari kedua branch ini sebenarnya sama (kita pastikan dengan menggunakan git pull origin main tadi), kecuali penambahan yang kita lakukan pada bagian marker. Arah panah pada gambar di atas mengindikasikan arah merging yang ingin kita lakukan. Tanda hijau  menunjukkan bahwa tidak ada konflik yang terjadi apabila kedua branch tersebut disatukan.\n\nKlik pada tombol Create Pull Request. Maka kita akan dibawa pada halaman untuk melakukan penggabungan (merge): \n\nKlik tombol Merge Pull Request, kemudian Confirm Merge. Maka tambahan kode dari branch marker-baru akan digabungkan dengan kode yang sebelumnya ada di branch main.\n\nSetelah merging berhasil, kita akan mendapatkan pesan bahwa Pull Request (PR) tersebut telah selesai digabungkan dan telah ditutup: \n\nKita dapat menghapus branch marker-baru apabila kita tidak memerlukannya lagi. Untuk saat ini, biarkan saja branch tersebut.\n\nKita dapat melihat isi dari commit terbaru kita pada halaman utama untuk memastikan bahwa tambahan kode yang kita buat telah digabungkan oleh Github.\n\n\nKlik pada ID commit seperti pada gambar. Tampilan detil dari commit tersebut akan muncul:\n\nSekali lagi, ingat bahwa sebuah commit adalah titik checkpoint. Kita dapat kembali lagi pada kondisi commit ini apabila kelak kita mengalami masalah atau bug dengan kode. Untuk itu, commit sangat berperan mengatur bagaimana status aplikasi yang kita kembangkan.\n\n\n\n\n\n\nFungsi dari branching\n\n\n\nMengapa perlu menggunakan branch? Bukankah kita juga dapat melakukan hal yang sama cukup dengan bekerja pada sebuah branch main branch saja?\nBranch dapat kita gunakan, misalnya, pada saat kita melakukan eksperimen pada aplikasi yang sedang kita kembangkan. Sebagai contoh, kita dapat menggunakan branch untuk melacak tiap fitur baru. Kita dapat menggabungkan branch tersebut pada branch rilis (misalnya branch main) hanya ketika kita telah benar-benar yakin bahwa fitur yang kita kembangkan pada branch tersebut siap untuk diproduksi. Branch juga memungkinkan banyak developer berkontribusi bersama-sama pada sebuah aplikasi dengan mengembangkan fitur untuk masing-masing branch. Penjelasan lebih detil terkait dengan branching dapat dilihat pada link berikut.\n\n\n\nSumber: Nobledekstop\n\n\n\n\n\n\n\n\n\n\nLatihan Mandiri 1\n\n\n\nUntuk latihan pertama ini, lakukan modifikasi pada file README.MD dengan menambahkan beberapa deskripsi singkat tentang halaman web tersebut. Gunakan cara manapun yang menurut Anda sesuai (menggunakan branch baru atau langsung pada branch main)\n\n\n\n\n\nBerkontribusi pada Repository Lain (Skenario 2)\nMetode branching seperti pada kasus di atas memerlukan akses sebagai owner atau administrator dari repository tersebut. Dengan demikian, tidak semua orang dapat melakukan branching pada sebuah repository yang bukan miliknya. Namun bagaimana dengan perangkat lunak Open Source yang memungkinkan semua orang untuk dapat berkontribusi? Apakah setiap kontributor harus menjadi admin terlebih dahulu?\nJawabannya tentu tidak harus. Sebagai contoh, perhatikan halaman Pull Request pada Repository Github QGIS berikut:\n\n\n\n\nGambar 9. Halaman PR Repository QGIS\n\n\n\nNama-nama yang ditandai berwarna merah pada Gambar 9 di atas adalah para pembuat PR untuk menambahkan fitur baru atau menyelesaikan bug pada QGIS. Sekarang bandingkan nama-nama tersebut dengan para member yang memiliki akses admin pada repository QGIS. Perhatikan bahwa tidak semua pull-request tersebut dibuat oleh para pengguna github pada daftar member tersebut.\nLantas bagaimana kita dapat berkontribusi pada perangkat lunak Open Source seperti QGIS ini tanpa menjadi seorang admin di repository tersebut? Kita dapat menggunakan metode forking yang akan kita praktekkan di sub-bab berikut. Metode forking memungkinkan semua orang untuk turut berkontribusi dan menyumbangkan ide atau fitur baru pada QGIS. Meskipun demikian, tidak semua permintaan PR (Pull Request) akan digabungkan begitu saja pada repository utama QGIS. Ingat bahwa hanya admin yang dapat melakukan merging. Dengan demikian, tiap Pull-request yang dibuat oleh para kontributor akan dievaluasi dan diuji oleh para admin sebelum resmi digabungkan pada branch rilis QGIS. Hal ini membuat manajemen rilis dan pengembangan fitur dapat berjalan secara lebih terkontrol serta terarah tanpa kehilangan esensi dari pengembangan perangkat lunak yang bersifat bebas dan terbuka.\n\nMelakukan ‘Forking’\nPada latihan berikut, kita akan membuat skenario kontribusi pada sebuah repository yang berada pada alamat https://github.com/danylaksono/latihan-webgis. Anda diminta untuk menambahkan titik pada daftar marker yang berada pada file index.html di repository tersebut. Ikuti langkah-langkah berikut:\n\nBuka halaman https://github.com/danylaksono/latihan-webgis, kemudian klik tombol Fork pada bagian kanan atas halaman \nAkan muncul halaman untuk membuat sebuah fork baru. Klik pada tombol Create Fork untuk membuat fork repository ini pada akun Anda. Pada contoh ini digunakan akun ppids-ugm. \nAkan muncul repository baru pada halaman Anda yang merupakan salinan dari repository github.danylaksono/latihan-webgis. \nBuka Konsol WSL Anda dan pindahkan direktori aktif ke folder latihan. \nLakukan cloning repository latihan-webgis pada Github Anda sebagaimana pada langkah sebelumnya. Perhatikan bahwa Anda melakukan cloning dari repository Github Anda sendiri (github.com/namaanda), bukan repository yang terletak pada github.com/danylaksono. Perintah untuk melakukan cloning adalah seperti berikut (sesuaikan username dengan akun Anda):\n\ngit clone https://github.com/&lt;namaakunanda&gt;/latihan-webgis\n\n\nPindahlah ke folder latihan-webgis. Buka VSCode pada folder ini.\n\n# Pindah ke folder latihan-webgis\ncd latihan-webgis\n\n# jangan lupakan tanda titik setelah code\ncode .\n\nSampai tahap ini, Anda juga dapat membuat sebuah branch baru dan melacak perubahan yang terjadi seperti pada latihan di contoh sebelumnya. Repository hasil fork yang Anda buat adalah milik Anda. Anda bebas untuk memodifikasi, membuat branch baru, menambahkan admin, dan seterusnya, tanpa merubah apapun pada repository asal.\n\n\n\n\n\n\nUpstream dan Origin\n\n\n\nSebagai catatan, mulai saat ini kita akan sebut repository Github latihan-webgis milik Anda sebagai repository origin, sedangkan repository latihan-webgis pada github.com/danylaksono sebagai repository upstream. Kita akan melihat penggunaannya setelah ini.\n\n\nSetelah memiliki sebuah repository lokal dan repository Github (origin), kita akan melakukan modifikasi pada kode ini untuk mensimulasikan skenario kontribusi perangkat lunak open source.\n\nPada VSCode working copy untuk repository latihan-webgis, buka berkas index.html: \nPada bagian script di dokumen HTML tersebut, Anda akan menemukan baris deklarasi variabel markers seperti berikut:\n\n      // Daftar Titik. Anda bisa menambahkan marker baru di sini\n      var markers = [\n          {\n              \"lat\": -6.954619,\n              \"lng\": 112.49871,  \n              \"keterangan\": \"MIM 03 Doudo\" \n          },\n          {\n              \"lat\": -6.98846,\n              \"lng\": 112.56513, \n              \"keterangan\": \"SMP N 1 Sidayu\" \n          },  \n          {\n              \"lat\": -7.16812,\n              \"lng\": 112.65273, \n              \"keterangan\": \"SMAN 1 Gresik\"\n          },\n      ];\n\nLakukan editing pada daftar marker tersebut. Tambahkan sebuah titik marker lagi pada variabel tersebut sehingga menjadi seperti berikut:\n\n      // Daftar Titik. Anda bisa menambahkan marker baru di sini\n      var markers = [\n          {\n              \"lat\": -6.954619,\n              \"lng\": 112.49871,  \n              \"keterangan\": \"MIM 03 Doudo\" \n          },\n          {\n              \"lat\": -6.98846,\n              \"lng\": 112.56513, \n              \"keterangan\": \"SMP N 1 Sidayu\" \n          },  \n          {\n              \"lat\": -7.16812,\n              \"lng\": 112.65273, \n              \"keterangan\": \"SMAN 1 Gresik\"\n          },\n          // tambahan titik baru. Sesuaikan dengan koordinat dan keterangan Anda sendiri\n          {\n              \"lat\": -7.76374,\n              \"lng\": 110.372936, \n              \"keterangan\": \"Teknik Geodesi UGM\"\n          },\n      ];\n\nBuat sebuah commit dan lakukan push untuk perubahan ini pada repository Github latihan-webgis Anda. Jika Anda lupa, perintah yang digunakan adalah sebagai berikut :\n\n# memastikan update dari repository origin\ngit pull origin main\n\n# menambahkan semua file ke dalam staging area\ngit add --all\n\n# membuat commit\ngit commit -am \"menambahkan satu marker\"\n\n# melakukan push commit ke repository origin\ngit push origin main\n\nPastikan bahwa Anda melakukan push pada repository yang sesuai, yaitu repository dengan nama akun Anda.\nDengan demikian, Anda telah berhasil melakukan forking dan membuat replika dari repository github.com/danylaksono/latihan-webgis dan memodifikasi kodenya untuk keperluan Anda sendiri. Anda dapat mendistribusikan repository ini sebagai hasil kerja Anda (tentunya dengan memperhatikan lisensi pada repository awal). Namun, bagaimana kalau Anda ingin menyumbangkan kode Anda pada repository github.com/danylaksono/latihan-webgis? Bagian berikutnya akan membahas mengenai hal ini.\n\n\nMembuat Pull-Request Antar Fork\nSkenario kita pada bagian ini adalah bahwa Anda ingin berkontribusi pada repository Upstream (github.com/danylaksono/latihan-webgis) sesuai dengan kode yang telah Anda buat pada repository Anda sendiri.\nUntuk itu, lakukan latihan berikut:\nSebelum melanjutkan latihan, terlebih dahulu kita akan membahas mengenai apa itu remote pada sebuah repository Github. Remote adalah alamat repository Github yang digunakan sebagai acuan pada saat melakukan pull dan push. Dengan kata lain, remote merupakan penguhubung antara repository lokal di komputer kita dengan repository Github yang menjadi sumber kode tersebut.\n\nPada konsol WSL, pastikan bahwa kita berada pada direktory latihan-webgis yang telah kita clone sebelumnya. Ketikkan perintah berikut:\n\ngit remote -v\n\nPada gambar di atas, origin merupakan nama dari remote tersebut, sedangkan https://github.com/ppids-ugm/latihan-webgis adalah alamat remote. Perhatikan bahwa remote inilah yang digunakan pada saat kita melakukan operasi git push origin main, sesuai dengan indikator di akhir alamat tersebut yang menunjukkan hak untuk melakukan fetch atau push.\nGambar di bawah ini merupakan modifikasi dari Gambar 3 untuk menunjukkan bagian-bagian repository Origin dan Upstream. Sekarang kita tahu bahwa kita dapat melakukan git pull dan git push apda repository origin, karena kita memiliki alamat remote yang terdaftar pada repository tersebut.\n\n\n\nGambar 10. Ilustrasi Upstream dan Origin\n\n\nBagaimana kita dapat melakukan hal yang sama untuk repository asal, agar kita dapat melakukan pengecekan (misalnya dengan git pull) sebelum menambahkan kode baru?\nIkuti langkah-langkah berikut:\n\nTerlebih dahulu, kita perlu menambahkan alamat remote baru pada repository lokal kita, yaitu alamat remote upstream. Gunakan perintah berikut pada shell WSL:\n\ngit remote add upstream https://github.com/danylaksono/latihan-webgis.git\n\nUlangi perintah berikut untuk melihat daftar alamat remote:\n\ngit remote -v\n\nSaat ini kita telah memiliki dua buah alamat remote: origin dan upstream. Meskipun demikian, kita tidak dapat melakukan git push upstream main, mengingat kita tidak memiliki otorisasi untuk melakukan demikian kecuali kita merupakan admin untuk repository danylaksono/latihan-webgis. Lantas mengapa kita menambahkan alamat upstream ini? Bayangkan apabila repository upstream tersebut mengalami perubahan, misalnya, penambahan kode oleh developer lain. Kita dapat menggunakan remote upstream untuk memastikan bahwa kode pada repository kita memiliki kondisi yang sama dengan repository origin. Untuk itu, kita perlu melakukan git pull pada repository upstream untuk menjamin agar tidak terjadi konflik dari kode yang kita unggah untuk Pull request nantinya.\n\nLakukan pembaruan (git pull) dari repository upstream dengan menggunakan perintah berikut:\n\ngit pull upstream main\n Perintah di atas bermakna: “Lakukan git pull pada branch main di repository upstream”.\n\nBuat modifikasi pada file yang berada di repository kita, misalnya dengan menambahkan titik lain pada file index.html seperti berikut:\n\nvar markers = [\n          {\n              \"lat\": -6.954619,\n              \"lng\": 112.49871,  \n              \"keterangan\": \"MIM 03 Doudo\" \n          },\n          {\n              \"lat\": -6.98846,\n              \"lng\": 112.56513, \n              \"keterangan\": \"SMP N 1 Sidayu\" \n          },  \n          {\n              \"lat\": -7.16812,\n              \"lng\": 112.65273, \n              \"keterangan\": \"SMAN 1 Gresik\"\n          },\n          // tambahan titik baru. Sesuaikan dengan koordinat dan keterangan Anda sendiri\n          {\n              \"lat\": -7.76374,\n              \"lng\": 110.372936, \n              \"keterangan\": \"Teknik Geodesi UGM\"\n          },\n          {\n              \"lat\": -7.495063,\n              \"lng\": 110.381643,  \n              \"keterangan\": \"Bukit Ketep\"\n          },\n      ];\n\nUnggah modifikasi ini dengan menggunakan git push pada repository Anda (origin):\n\ngit add --all\ngit commit -am \"menambahkan titik baru\"\ngit push origin main\n\nSekali lagi perhatikan bahwa kita melakukan update pada repository Github origin yang kita miliki.\n\nKita akan membuat sebuah Pull Request pada repository Upstream. Prosedurnya hampir sama seperti sebelumnya. Buka halaman https://github.com/danylaksono/latihan-webgis, kemudian klik menu Pull Request: \nPada halaman Pull Requests, klik pada tombol New pull request: \nKlik pada tulisan Compare accross forks \nPilih branch dan repository asal: namaanda/latihan-webgis (main) serta branch dan repository tujuan: danylaksono/latihan-webgis (main) \n\nSetelahnya Anda akan dapat melihat perubahan dari repository Anda yang ingin digabungkan dengan repository danylaksono/latihan-webgis. Klik pada tombol  untuk mengajukan permohonan penggabungan tersebut.\n\nPastikan bahwa merging dapat dilakukan tanpa konflik. Isikan Judul PR dan keterangan, kemudian klik Create Pull Request \nPull request telah berhasil dibuat. \n\nSekarang, apabila Anda memeriksa kode pada danylaksono/latihan-webgis, apakah Anda akan melihat kode yang Anda usulkan? Belum tentu. Admin dari repository danylaksono/latihan-webgis akan memeriksa PR yang Anda buat serta memastikan tidak ada kesalahan yang muncul sebagai akibat dari penggabungan tersebut. Apabila admin merasa bahwa kode yang Anda tulis cukup baik dan memenuhi syarat, maka Admin akan menerima pull-request tersebut (bagian ini hanya dapat dilakukan oleh admin): \nSetelahnya, barulah Anda akan dapat melihat kode Anda telah digabungkan pada repository danylaksono/latihan-webgis: \nSelamat! Anda telah menyelesaikan latihan tentang Github. Hasil Pull Request yang Anda buat pada latihan ini akan diperiksa oleh Admin dan digabungkan ke dalam kode utama. Apabila Pull request Anda diterima oleh admin, Anda akan dapat melihat updatenya secara otomatis pada alamat berikut: https://danylaksono.com/latihan-webgis \n\n\n\n\n\n\nDari kode menjadi website\n\n\n\nBagaimana mungkin kode tersebut dapat langsung dipublikasi secara otomatis menjadi sebuah website? Sub-bab selanjutnya akan membahas mengenai hal ini."
  },
  {
    "objectID": "1_persiapan/git-dan-github.html#publikasi-halaman-web-pada-github",
    "href": "1_persiapan/git-dan-github.html#publikasi-halaman-web-pada-github",
    "title": "Git dan Github",
    "section": "Publikasi Halaman Web pada Github",
    "text": "Publikasi Halaman Web pada Github\nGithub menyediakan layanan domain dan hosting gratis untuk sebuah website static yang disebut dengan nama Github Pages. Ini berarti jika Anda menyimpan berkas-berkas website statik (sebuah file index.html seperti contoh di atas, misalnya) maka repository tempat Anda menyimpan berkas tersebut dapat Anda publikasikan menjadi sebuah halaman yang dapat diakses dari internet.\nSetiap pengguna Github akan mendapatkan sebuah domain gratis: https://&lt;namapengguna&gt;.github.io. Domain ini mengambil berkas dari repository yang memiliki nama &lt;namapengguna&gt;.github.io. Ini berarti, apabila Anda membuat sebuah repository dengan nama tersebut dan menempatkan sebuah file index.html di dalamnya, maka isi dari file index.html ini akan dapat diakses dari alamat https://&lt;namapengguna&gt;.github.io. Selain itu, seluruh repository lain pada akun Github tersebut juga dapat diakses sebagai sebuah path. Sebagai contoh, repository dengan nama latihan-webgis akan dapat diakses dari alamat https://&lt;namapengguna&gt;.github.io/latihan-webgis. Menarik, bukan?\n\nPublikasi halaman utama\nKita akan mulai dengan mempraktekkan bagaimana mengaktifkan domain &lt;namapengguna&gt;.github.io pada akun Anda. Ikuti langkah berikut:\n\nBuat sebuah repository baru. Repository ini harus memiliki nama &lt;namapengguna&gt;.github.io (lihat contoh di bawah). Apabila terdapat perbedaan antara nama pengguna dan bagian awal dari nama repository ini, maka website tersebut tidak akan dapat diakses dan domain ini tidak dapat digunakan. \n\nBagaimana kalau Anda ingin menggunakan nama domain lain, misalnya .github.io? Jawabannya adalah Anda tidak dapat melakukannya. Jika Anda gunakan nama yang berbeda untuk repository ini, meskipun dengan akhiran .github.io, maka domain tersebut tidak akan dapat diakses. Github hanya memberikan satu buah domain yang sesuai dengan nama pengguna Anda. Inilah mengapa pemilihan nama pengguna Github di awal cukup penting. Nama ini sekaligus juga sebagai sebuah alamat domain.\nApabila Anda tetap ingin menggunakan nama domain yang berbeda dengan nama pengguna Anda, maka Anda dapat membuat sebuah organization dengan nama yang Anda pilih. Sebuah organization dapat memiliki satu nama domain (misalnya seperti ppids-ugm.github.io) di atas. Anda dapat membuat beberapa organisasi sekaligus, meskipun mungkin Anda perlu meluangkan waktu ekstra untuk mengatur organisasi yang berbeda.\n\nSeperti sebelumnya, tambahkan file README pada repository ini. Pilih lisensi, kemudian klik pada Create Repository. \nSetelah halaman repository selesai dibuat, lakukan cloning pada repository ini di folder latihan. Berikut adalah contoh perintah untuk melakukan hal tersebut: \nMasuk pada direktori hasil cloning (&lt;namapengguna&gt;.github.io). Buka VSCode pada direktori ini. Selanjutnya, tambahkan sebuah file baru pada repository ini dengan nama index.html. \nIsikan baris kode berikut pada file index.html:\n\n\n\nindex.html\n\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Landing Page&lt;/title&gt;\n    &lt;style&gt;\n      body {\n        background-image: radial-gradient(circle at center, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.5) 100%), url('https://images.pexels.com/photos/460621/pexels-photo-460621.jpeg');\n        background-attachment: fixed;\n        background-position: center;\n        background-repeat: no-repeat;\n        background-size: cover;\n      }\n      .container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        height: 100%;\n      }\n      .title {\n        text-align: center;\n        font-size: 48px;\n        font-weight: bold;\n        color: white;\n        text-shadow: 2px 2px 20px #000000;\n      }\n      .subtitle {\n        text-align: center;\n        font-size: 24px;\n        color: white;\n        text-shadow: 2px 2px 4px #000000;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=\"container\"&gt;\n      &lt;div class=\"title\"&gt;Github Pages Landing&lt;/div&gt;\n      &lt;div class=\"subtitle\"&gt;Thank you for visiting&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n\nSimpan file tersebut dan lakukan push ke repository Github: \nBuka alamat https://&lt;namapengguna&gt;.github.io di browser Anda: \n\nSelamat! Anda telah berhasil mempublikasikan sebuah website. Sub-bab berikutnya akan membahas lebih jauh fitur dari Github Pages.\n\n\nPublikasi repository sebagai path\nKita sekarang memiliki sebuah domain, dan kita dapat mempublikasikan sebuah website statik pada alamat tersebut. Tetapi bagaimana jika kita ingin mempublikasi repository lain pada akun Github kita? Kalau Anda masih ingat, sebelumnya kita juga menggunakan repository latihan-webgis untuk menyimpan sebuah peta yang menampilkan beberapa marker. Pada bagian ini, kita akan mempublikasikan repository ini sebagai sebuah website pada path, misalnya pada https://&lt;namapengguna&gt;.github.io/latihan-webgis.\n\nBuka halaman repository latihan-webgis Anda. Misalnya pada https://github.com//latihan-webgis: \nBuka pengaturan menggunakan tombol Settings. \nPada halaman Settings, klik menu Pages \nPada Halaman Github Pages, pilih branch yang akan dipublikasi. Pada repository latihan-webgis, kita hanya memiliki satu buah branch yaitu main. Pilih branch tersebut, kemudian klik Save. \nTunggu beberapa saat sampai repository tersebut dipublikasi. Anda akan melihat pemberitahuan your site is live at  https://&lt;namapengguna&gt;.github.io/latihan-webgis/ ketika proses selesai. \nKunjungi halaman tersebut pada browser: \n\n\n\n\n\n\n\nLatihan Mandiri 2\n\n\n\nUntuk latihan kedua, coba publikasikan repository simple-webgis yang Anda buat pada awal latihan di bab ini. Praktekkan untuk melakukan modifikasi kode, melakukan pull, membuat commit serta melakukan push kode ke domain Anda. Buat sedemikian rupa sehingga peta pada repository simple-webgis ini dapat diakses melalui https://&lt;namapengguna&gt;.github.io/simple-webgis."
  },
  {
    "objectID": "1_persiapan/git-dan-github.html#kesimpulan",
    "href": "1_persiapan/git-dan-github.html#kesimpulan",
    "title": "Git dan Github",
    "section": "Kesimpulan",
    "text": "Kesimpulan\nDengan ini, Anda telah menyelesaikan latihan dan mempraktekkan penggunaan Github sebagai salah satu sistem untuk Version Control System. Anda telah memahami bagaimana alur kontribusi masing-masing developer pada pembangunan sebuah aplikasi open source, serta mempraktekkan bagaimana Github dapat digunakan untuk mempublikasi sebuah website statis dengan menggunakan Github Pages. Masih banyak fitur Github yang tidak disebutkan di latihan singkat ini. Akan tetapi, Anda dapat menggali dari banyak latihan yang tersedia di internet.\nTujuan lain dari materi Github pada awal modul ini adalah agar Anda memiliki sebuah tempat untuk mempublikasikan portofolio pekerjaan Anda. Lakukan praktek pembangunan aplikasi sederhana dan unggah ke Github sehingga Anda memiliki dokumentasi yang baik akan skill pembangunan aplikasi sekaligus manajemen perangkat lunak dan developer yang mengembangkan aplikasi.\nDi bab selanjutnya Anda akan bertemu dengan pembangunan aplikasi menggunakan NodeJS dan khususnya NextJS. Pastikan Anda telah memahami sebagian besar materi di bab ini terlebih dahulu. Apabila Anda ragu atau lupa, jadikan halaman ini sebagai rujukan sehingga Anda tetap dapat kembali pada bagian yang diperlukan."
  },
  {
    "objectID": "1_persiapan/instalasi-perangkat.html",
    "href": "1_persiapan/instalasi-perangkat.html",
    "title": "Instalasi Perangkat Lunak",
    "section": "",
    "text": "Sub-bab berikut memberikan penjelasan tentang cara instalasi beberapa perangkat yang akan kita gunakan sepanjang modul. Berbagai perangkat yang disebutkan di sini tidak hanya berguna untuk keperluan modul ini saja. Anda akan menjumpai kebutuhan serupa ketika mengikuti berbagai tutorial lain. Anggaplah perangkat-perangkat yang ada di sini sebagai kemampuan dasar yang perlu Anda miliki sebelum menyelami lebih jauh tentang WebGIS development. Dengan mengetahui fungsi dan bagaimana menggunakan perangkat-perangkat ini, Anda akan jauh lebih siap untuk mengikuti berbagai tutorial lain yang ada di luar sana.\nPerlu diingat bahwa dalam perkembangan dunia internet yang serba cepat, sebagian panduan ini mungkin tidak dapat digunakan setelah berlalu beberapa waktu. Demikian pula, mungkin versi yang lebih baru dari perangkat lunak yang disebutkan di sini akan bermunculan, sehingga Anda disarankan untuk memeriksa sendiri apabila terdapat versi terbaru yang dapat diinstall selain yang disebutkan di sini."
  },
  {
    "objectID": "1_persiapan/instalasi-perangkat.html#instalasi-wsl-pada-windows",
    "href": "1_persiapan/instalasi-perangkat.html#instalasi-wsl-pada-windows",
    "title": "Instalasi Perangkat Lunak",
    "section": "Instalasi WSL pada Windows",
    "text": "Instalasi WSL pada Windows\n\nApa itu WSL?\n\n\n\n\n\n\n“Try to think outside the window, art, cinematic, dreamy” (StableDiffusion)\n\n\n\n\n\n\nWindows Subsystem for Linux (WSL) adalah fitur dari sistem operasi Windows yang memungkinkan pengguna untuk menjalankan aplikasi Linux di dalam lingkungan Windows. Pendeknya, WSL merupakan satu cara yang memudahkan pengguna Windows untuk mengakses aplikasi Linux tanpa perlu menginstal Linux secara terpisah di komputer mereka (misalnya, dengan menggunakan Dual Boot atau Virtual Box).\n\n\n\n\nDengan WSL, pengguna dapat mengakses dan menjalankan perintah Linux seperti yang mereka lakukan di lingkungan Linux asli. Selain itu, WSL juga memungkinkan pengguna untuk mengakses file dan folder di sistem operasi Windows dari dalam lingkungan Linux, sehingga memudahkan bagi pengguna untuk mengelola file dan folder di komputer mereka.\n\n\n\n\n\nWSL telah tersedia untuk sistem operasi Windows sejak versi Windows 10 yang dirilis pada tahun 2016. WSL memberikan angin segar bagi para developer yang menginginkan fleksibilitas dan kapabilitas Linux, namun memerlukan kemudahan Windows dalam manajemen file, misalnya. Meskipun demikian, ada beberapa batasan dari WSL, misalnya, terdapat beberapa fungsi dasar pada Linux yang tidak dapat dijalankan di sana. Hal ini mungkin akan berubah di masa yang akan datang, karena sepertinya Windows mencoba untuk mengintegrasikan lingkungan Linux sepenuhnya di dalam Windows.\n\n\nMengapa Menggunakan WSL pada Windows?\nDengan perkembangan pesat Linux pada berbagai platform dan dukungan komunitas yang sangat besar, Linux menjadi sistem operasi yang banyak digunakan oleh pengembang aplikasi, khususnya pada penggunaan server. Linux banyak dipilih karena selain mudah digunakan, keamanan dan stabilitas sistem yang diberikan juga menjadi poin penting dalam penggunaannya untuk keperluan server. Di sisi lain, Windows sebagai sistem operasi yang paling populer saat ini juga banyak digunakan untuk keperluan sehari-hari. Untuk itu, pengembangan perangkat lunak seringkali melibatkan kedua sistem operasi ini sekaligus (juga MacOS, bagi pengguna setianya).\nWSL dalam konteks ini menjadi salah satu tool favorit bagi para pengembang perangkat lunak karena memungkinkan integrasi keduanya: Linux di satu sisi, dan Windows di sisi lain, secara hampir seamless. Untuk itu, pada modul ini panduan akan diberikan menggunakan WSL, meskipun tentu saja Anda dapat menyesuaikannya dengan sistem operasi lain (misalnya, MacOS).\n\n\n\n\n\n\nTentang Sistem Operasi\n\n\n\nPanduan ini mengasumsikan Anda menggunakan Sistem Operasi Windows 11. Apabila terdapat permasalahan pada instalasi atau pengaturan beberapa library, silahkan hubungi penulis untuk menemukan solusinya.\n\n\n\n\nInstalasi WSL\nWSL saat ini telah resmi menjadi bagian dari Windows 10 dan 11, sehingga instalasinya sama seperti instalasi perangkat lunak lain. Cara paling mudah tentunya adalah melalui Windows Store seperti berikut:\n\nBuka Windows Store melalui Start Menu. \nPada jendela Windows Store yang terbuka, ketikkan WSL. Anda akan menjumpai tampilan seperti berikut: \nKlik pada tombol Get untuk melakukan instalasi WSL.\nSetelah instalasi selesai, klik pada tombol Open \n\nAnd that’s it. WSL akan terinstall dan siap untuk digunakan. Anda akan menjumpai tampilan Linux seperti berikut ini:\n\nWSL akan menginstall versi Linux yang terbaru sesuai dengan versi Distro Ubuntu terakhir. Ubuntu merupakan distro default yang diinstall oleh WSL. Meskipun demikian, Anda dapat menginstall Distro Linux lainnya apabila diperlukan (misalnya Kali Linux atau AlmaLinux).\n\n\n\n\n\n\nRujukan instalasi WSL\n\n\n\nApabila Anda menemukan masalah dengan cara instalasi di atas, buka panduan instalasi resmi dari Windows berikut untuk menemukan solusi yang tepat: https://learn.microsoft.com/en-us/windows/wsl/install\n\n\n\n\nBeberapa Perintah Dasar Shell Linux\nSebelum memulai dengan WSL, ada baiknya kita lakukan beberapa latihan tentang perintah-perintah dasar di Linux. Dalam rangka untuk menghindari pengulangan, modul berikut berisi beberapa latihan yang berguna untuk mengasah pemahaman Anda pada dasar-dasar penggunaan Linux:\nhttps://www.danylaksono.com/panduan-fossgis/sesi1/arsitektur.html#mengunakan-shell\nLuangkan waktu untuk melakukan beberapa latihan di link tersebut, seperti cara untuk berpindah direktori, membuat file baru, menampilkan keterangan dari sebuah file, dan seterusnya. Meskipun tidak harus, ini akan membantu Anda dalam melakukan latihan-latihan lain di modul ini.\nTidak perlu khawatir jika Anda merasa tidak dapat menghafal semua perintah Shell Linux di atas. Tujuan belajar pemrograman sama sekali bukan untuk menghafal perintah. Perintah-perintah di atas adalah sarana yang memudahkan Anda ketika membuat sebuah program. Jika Anda lupa, Anda dapat kembali kapanpun ke link dokumentasi di atas atau sekedar membuka Google dan mengingat kembali perintah yang Anda butuhkan. Percayalah, seiring waktu, Anda akan terbiasa menggunakan perintah-perintah tersebut tanpa sadar.\n\n\nMengakses Direktori WSL dari Windows\nSeperti yang telah disebutkan, intergrasi WSL pada Windows bersifat seamless. Kita dapat mengakses aplikasi Windows dari WSL, dan sebaliknya, kita dapat mengakses direktori WSL dari Windows. Untuk mengakses direktori Ubuntu (WSL) yang telah kita install pada Windows, cukup buka Windows Explorer dan cari Icon Linux pada daftar direktori di sebelah kiri jendela Windows Explorer:"
  },
  {
    "objectID": "1_persiapan/instalasi-perangkat.html#instalasi-nodejs-dan-package-manager",
    "href": "1_persiapan/instalasi-perangkat.html#instalasi-nodejs-dan-package-manager",
    "title": "Instalasi Perangkat Lunak",
    "section": "Instalasi NodeJS dan Package Manager",
    "text": "Instalasi NodeJS dan Package Manager\nModul ini berisi panduan dalam pembangunan WebGIS. Untuk itu, kita akan menggunakan salah satu framework yang hampir tidak diragukan lagi menjadi bagian penting dalam perkembangan dunia Web selama sepuluh tahun terakhir ini: NodeJS. Sub-bab ini akan membahas mengenai bagaimana melakukan instalasi NodeJS dan Node Package Manager (NPM).\n\nApa itu NodeJS?\nDulu, para pengembang web hanya mengenal Javascript sebagai ‘bahasanya browser’. Javascript hanya dapat dijalankan di browser sebagai pelengkap bahasa HTML dan CSS. Berbeda dengan bahasa lainnya seperti Java dan C# yang merajai server serta C++ dan DotNet yang dapat digunakan untuk membuat aplikasi desktop, Javascript pada masa itu hanya dikenal sebagai bahasa frontend untuk membuat halaman web menjadi interaktif.\nPada tahun 2008, Google merilis Javascript Engine V8. Jika sebelumnya Javascript hanya dapat dijalankan di browser, maka mesin ini memungkinkan Javascript untuk dieksekusi di berbagai platform yang berbeda. Selain itu, mesin ini juga memungkinkan kode Javascript untuk dijalankan secara parallel - sesuatu terasa mustahil di tahun-tahun sebelumnya.\nDengan adanya V8, Javascript kemudian menemukan nafas baru: bahasa yang dulunya hanya dikenal sebagai bahasa frontend kini dapat menjalankan berbagai aplikasi rumit dengan kecepatan dan kemampuan prosesing yang mumpuni. NodeJS adalah sebuah platform runtime 1 yang dibangun di atas JavaScript engine V8, yang memungkinkan untuk menjalankan kode JavaScript di luar browser (termasuk di server). NodeJS memungkinkan kita untuk membangun aplikasi server-side dengan menggunakan JavaScript sebagai bahasa pemrograman utama, seperti aplikasi pengolah data dan basisdata serta aplikasi yang memerlukan performa tinggi seperti game. Bahkan, Javascript kini juga dapat digunakan untuk membuat sebuah aplikasi desktop yang dapat dijalankan di Windows, MacOS atau Linux.1 Runtime dapat diartikan secara bebas sebagai tempat di mana kode Javascript dijalankan. Dulu, satu-satunya Javascript runtime adalah sebuah browser. Sekarang Javascript dapat dijalankan hampir di platform manapun, misalnya pada sebuah server. Runtime dibangun di atas sebuah engine, yang dalam hal ini adalah V8.\nDengan banyaknya pengembang yang membuat aplikasi berbasis NodeJS, dibuatlah sebuah wadah untuk saling berbagi-pakai paket aplikasi yang dibuat tersebut. NPM adalah singkatan dari Node Package Manager2, yang merupakan sebuah sistem manajemen paket untuk bahasa pemrograman JavaScript. NPM memungkinkan para developer untuk berbagi kode, menggunakan kode yang dibuat oleh orang lain, dan mengelola dependensi (pustaka yang dibutuhkan) pada proyek mereka. Dengan adanya NPM, kita dapat menginstall berbagai paket perangkat lunak dengan mudah, sekaligus memastikan bahwa dependencies yang digunakan oleh paket tersebut sesuai satu dengan yang lain pada aplikasi kita.2 Node adalah nama sebuah Runtime Javascript. Alternatif lain untuk NPM adalah Yarn\n\n\n\n\n\n\nMengapa NodeJS penting dalam pengembangan web saat ini?\n\n\n\nHalaman web seperti yang kita lihat saat ini saat ini dibangun di atas berbagai macam paket yang telah dibuat oleh para developer lain. Kita tidak perlu membangun semua hal dari nol. Sesuai prinsip ‘Do Not Reinvent The Wheel’, kita tinggal menggunakan paket-paket aplikasi yang telah dibangun orang lain untuk melengkapi web kita sesuai dengan apa yang kita inginkan. NextJS dan Maplibre yang akan kita gunakan nanti merupakan contoh paket yang dipublikasi di NPM, dan dibangun di atas ratusan atau bahkan ribuan paket-paket lain.\n\n\n\n“Painting, digital art, a visual depiction of NodeJS and NPM packages” (Dreamlike Diffusion)\n\n\n\n\n\n\nInstalasi NodeJS pada WSL\nPada bagian ini kita akan melakukan instalasi NodeJS sekaligus NPM. Terdapat berbagai macam cara untuk melakukan instalasi NodeJS, akan tetapi pada modul ini akan dilakukan instalasi dengan menggunakan NVM (Node Version Manager). NVM memudahkan kita untuk berpindah dari satu versi NodeJS ke versi lain. Kadang kala kita memerlukan ini apabila terdapat beberapa aplikasi berbeda yang menggunakan dependencies paket NPM yang berbeda. Menginstall beberapa versi NodeJS sekaligus akan menimbulkan banyak permasalahan. NVM mengatasi masalah-masalah tersebut.\nBerikut adalah langkah instalasi NodeJS dan NPM dengan menggunakan NVM:\n\nBuka Ubuntu WSL Anda. Pada contoh berikut, versi WSL yang penulis gunakan adalah versi Ubuntu 20.04. Boleh jadi versi WSL yang terinstall di komputer Anda berbeda sesuai dengan versi stabil terakhir dari Ubuntu.\n\nPada jendela Ubuntu yang muncul, copy-paste kode di bawah ini dan jalankan:\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash\n\n\n\n\n\n\n\n\nKlik-kanan pada konsol Ubuntu = ‘Paste’\n\n\n\n\nUntuk mengaktifkan NVM, tutup kemudian buka kembali konsol Ubuntu, atau jalankan kode di bawah ini tanpa perlu menutup konsol:\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  \n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  \n\nPastikan bahwa NVM telah terinstall dengan menjalankan perintah berikut:\nnvm -v\nPerintah di atas berfungsi untuk memeriksa versi dari NVM yang terinstall, sekaligus memastikan bahwa NVM telah dapat dijalankan dengan baik. Pada saat modul ini ditulis, versi terakhir dari NVM adalah 0.39.3.\nSetelah NVM terinstall, selanjutnya kita dapat melakukan instalasi NodeJS dan NPM sekaligus. Untuk melakukan instalasi versi NodeJS terbaru melalui NVM, kita dapat menggunakan perintah berikut:\nnvm install node\n\nTerakhir, kita pastikan bahwa NodeJS dan NPM telah terinstall dengan perintah berikut:\nnode -v\nnpm -v\n\n\nDengan demikian, kita telah berhasil melakukan instalasi versi terbaru dari NodeJS dan NPM.\nApabila kelak kita mendapati kebutuhan untuk menggunakan versi NodeJS yang berbeda, kita dapat memanggil perintah yang disediakan NVM untuk itu:\n# perintah ini berfungsi untuk menampilkan daftar versi NodeJS \nnvm ls-remote\n\n# perintah ini untuk menginstall dan menggunakan versi yang dipilih\n# sebagai contoh, digunakan versi 18.12.1:\nnvm install 18.12.1\nnvm use 18.12.1"
  },
  {
    "objectID": "1_persiapan/instalasi-perangkat.html#instalasi-miniconda",
    "href": "1_persiapan/instalasi-perangkat.html#instalasi-miniconda",
    "title": "Instalasi Perangkat Lunak",
    "section": "Instalasi Miniconda",
    "text": "Instalasi Miniconda\n\nTentang Miniconda\nPython adalah salah satu bahasa pemrograman paling populer di dunia saat ini. Bahasa Python tergolong mudah dipahami, sehingga mendorong banyak developer membangun aplikasinya pada Python. Meskipun demikian, manajemen environment pada Python terkadang cukup menyulitkan bagi developer pemula. Untuk itu, Anaconda dibuat agar para developer dapat menggunakan Python dengan lebih mudah. Versi mini dari Anaconda, Miniconda, dibuat untuk memudahkan instalasi paket-paket Pyhton sehingga dapat digunakan bahkan oleh developer pemula.\n\n\nInstalasi Miniconda pada WSL\nBerikut adalah langkah instalasi Miniconda pada WSL:\n\nBuka konsol WSL, kemudian ketikkan perintah berikut untuk mengunduh instalasi Miniconda:\n\nwget https://repo.anaconda.com/miniconda/Miniconda3-py310_22.11.1-1-Linux-x86_64.sh\n\n\nLakukan instalasi dengan menjalankan file hasil unduhan.\n\nsh ./Miniconda3-py310_22.11.1-1-Linux-x86_64.sh\n Tekan Enter untuk melanjutkan instalasi\n\nPada pertanyaan yang muncul, jawab dengan mengetikkan yes \n\nSetelah terinstall, pada konsol kita akan muncul tambahan (base) yang menunjukkan bahwa kita berada pada environment default miniconda. Selanjutnya kita telah dapat menggunakan perintah-perintah conda, misalnya untuk melakukan instalasi paket Python atau membuat environment baru."
  },
  {
    "objectID": "1_persiapan/instalasi-perangkat.html#instalasi-docker-dan-docker-compose",
    "href": "1_persiapan/instalasi-perangkat.html#instalasi-docker-dan-docker-compose",
    "title": "Instalasi Perangkat Lunak",
    "section": "Instalasi Docker dan Docker Compose",
    "text": "Instalasi Docker dan Docker Compose\nPada sub-bab ini, kita akan melakukan instalasi Docker. Meskipun Docker sendiri adalah salah satu perangkat yang paling berguna bagi seorang developer web, modul ini sendiri tidak akan membahas banyak mengenai penggunaannya. Anda akan menjumpai banyak contoh penggunaan perangkat ini nantinya di modul lain.\n\nApa itu Docker?\nTelah disebutkan sebelumnya di bab ini bahwa sebuah aplikasi web terdiri dari banyak komponen yang berbeda. Anda dapat asumsikan sebuah web sebagai sebuah bangunan yang terdiri dari komponen-komponen yang saling melengkapi. Coba kita asumsikan sebuah aplikasi web sebagai satu bangunan restoran franchise: Bangunan restoran tersebut dibangun dari banyak komponen: ada batu-bata penyusun gedungnya, tempat parkir, meja-kursi, pelayan, alat-alat masak, dan seterusnya. Sebagai restoran franchise, Anda perlu untuk membangun restoran pertama terlebih dahulu bukan? Selanjutnya, Anda perlu membangun restoran lain dengan struktur bangunan, konsep dasar dan tema yang sama persis seperti restoran pertama tersebut.\nAnalogi di atas kurang-lebih sama seperti pembangunan sebuah aplikasi webGIS. Anda membangun terlebih dahulu aplikasi WebGIS di lingkungan ‘development’ yang Anda miliki, kemudian memindahkannya (‘deploy’) ke lingkungan ‘production’ di mana aplikasi tersebut benar-benar digunakan oleh klien. Pindah-memindah aplikasi WebGIS ini tentu bukan perkara mudah, karena, sekali lagi, aplikasi ini tersusun dari banyak komponen yang berbeda. Kita tentunya tidak ingin setiap kali melakukan deployment aplikasi, kita harus menyusunnya dari nol bukan?\nDocker adalah perangkat lunak yang memungkinkan Anda untuk mengelola aplikasi dalam “wadah” yang dapat dibawa ke mana saja dan dijalankan di mana saja. Ini membantu Anda mengelola aplikasi Anda dengan lebih mudah, karena Anda tidak perlu khawatir tentang konfigurasi sistem yang berbeda atau dependensi yang berbeda di lingkungan production yang diperlukan untuk menjalankan aplikasi Anda. Anda hanya perlu ‘membungkus’ aplikasi Anda dalam wadah Docker, dan Anda dapat dengan mudah memindahkannya ke berbagai lingkungan, seperti server, mesin virtual, atau cloud. Analogi untuk Docker dapat Anda lihat pada logonya: sebuah kapal yang berfungsi untuk melakukan shipment berbagai kontainer aplikasi yang ada di dalam muatannya.\n\nKeuntungan lain dari penggunaan Docker adalah bahwa Anda dapat memanggil paket aplikasi yang dibuat oleh orang lain, menyusunnya (‘compose’) sebagai komponen-komponen baru, dan mendapatkan bangunan baru yang terdiri atas komponen-komponen tersebut (bayangkan sebuah bangunan restoran - kali ini dengan beberapa lantai berbeda). Docker memungkinkan semua urusan pindah-memindah aplikasi menjadi lebih mudah.\n\n\nInstalasi Docker for Windows\nMasih ingat berbagai keuntungan kita menggunakan WSL sebagai lingkungan development? Salah satunya adalah kemudahan integrasi antara Windows dan Linux pada satu mesin yang sama. Untuk itu, kita dapat melakukan instalasi Docker pada Windows, dan kita akan tetap dapat mengaksesnya dari Linux.\nBerikut adalah langkah instalasi Docker for Windows. Anda dapat melihat panduan resmi instalasi pada alamat berikut:\n\nUnduh instalasi Docker Desktop for Windows. Jalankan file *.exe ketika berkas tersebut selesai diunduh.\n\nPastikan bahwa pilihan Use WSL 2 instead of Hyper-V aktif atau tercentang. Lanjutkan instalasi sampai selesai.\n\nJalankan aplikasi service Docker Desktop dari start menu. Aplikasi ini akan berjalan di belakang layar untuk mendukung perintah Docker pada WSL:\n\n\nApabila jendela ini muncul, Anda dapat menutupnya. Docker akan tetap berjalan sebagai sebuah service di Windows.\n![](../images/2022-12-27-21-09-09.png)\nUntuk memastikan bahwa Docker telah terinstall, buka konsol WSL, kemudian gunakan perintah berikut:\ndocker run hello-world\nPerintah di atas akan memanggil kontainer aplikasi hello-world dari Docker Hub, kemudian menjalankannya pada WSL. Apabila instalasi berjalan tanpa kendala, hasil berikut akan muncul di konsol WSL Anda:\n\nDiantara paket Docker yang terinstall adalah perintah Docker Compose yang dapat digunakan untuk membuat paket aplikasi agar lebih mudah dijalankan. Cek bahwa perintah ini telah terinstall dengan sempurna menggunakan perintah berikut:\ndocker compose -v\nHasilnya adalah seperti gambar berikut:\n\nSetelah kedua perintah tersebut berhasil dijalankan dengan baik, kita siap untuk menggunakannya pada beberapa latihan di modul ini."
  },
  {
    "objectID": "1_persiapan/instalasi-perangkat.html#instalasi-code-editor-vscode",
    "href": "1_persiapan/instalasi-perangkat.html#instalasi-code-editor-vscode",
    "title": "Instalasi Perangkat Lunak",
    "section": "Instalasi Code Editor (VSCode)",
    "text": "Instalasi Code Editor (VSCode)\nTentunya, dalam pembangunan aplikasi WebGIS kita memerlukan sebuah code editor. Anda mungkin familiar dengan Notepad++, akan tetapi untuk modul ini kita akan menggunakan sebuah Code Editor sekaligus IDE (Integrated Development Environment). Editor kode sederhana seperti Notepad++ mungkin cukup untuk sekedar melakukan editing pada beberapa berkas sederhana, tetapi kita memerlukan sebuah IDE untuk pembangunan aplikasi yang lebih serius.\n\nTentang Integrated Development Environment (IDE)\nJadi, apa itu IDE?\nIntegrated Development Environment (IDE) adalah aplikasi perangkat lunak yang menyediakan fasilitas yang menyeluruh bagi programmer komputer untuk pengembangan perangkat lunak. Termasuk di dalam IDE adalah code editor, compiler atau interpreter, dan debugger yang dapat diakses melalui antarmuka pengguna grafis (GUI) tunggal. IDE dirancang untuk meningkatkan produktivitas dengan menyediakan satu antarmuka untuk semua alat yang dibutuhkan seorang developer: untuk menulis, menguji, dan men-debug kode mereka.\n\n\n\n\n\n\n“Hi-tech spider web, server room, cinematic lightning, shadow, electric sparks, glowing, ray-tracing –v 4” (MidJourney)\n\n\n\n\nDi sisi lain, editor kode seperti Notepad++ adalah aplikasi perangkat lunak yang secara khusus dirancang untuk mengedit berkas kode sederhana. Editor kode biasanya menyediakan fitur dasar seperti highlighting syntax, auto-indentasi, dan code completion, tetapi biasanya tidak termasuk fitur advanced yg dibutuhkan untuk pembangunan aplikasi yang lebih serius, seperti compiler, interpreter, atau debugger. Editor kode secara umum lebih sederhana dan ringan daripada IDE, dan seringkali digunakan oleh developer yang hanya membutuhkan fitur-fitur editing dasar dengan beberapa tambahan.\n\n\n\nBeberapa contoh code editor/IDE yang populer adalah:\n\nVisual Studio Code: Code editor yang dikembangkan oleh Microsoft dengan berbagai fitur seperti debugging, intelligent code completion, dan version control. VSCode dapat digunakan untuk berbagai bahasa pemrograman.\nSublime Text: Code editor yang ringan dan cepat dengan berbagai fitur seperti syntax highlighting, code completion, dan code folding. Sama seperti VSCode, Sublime mendukung penggunaa berbagai bahasa pemrograman.\nAtom: Code editor yang dikembangkan oleh GitHub dengan berbagai fitur seperti multi-pane view, package manager, dan integrasi dengan Git. Perangkat ini juga dapat digunakan untuk berbagai bahasa pemrograman.\nIntelliJ IDEA: Integrated Development Environment (IDE) yang dikembangkan oleh JetBrains untuk berbagai bahasa pemrograman seperti Java, Kotlin, dan Scala\nEclipse: IDE yang dapat digunakan untuk berbagai bahasa pemrograman seperti Java, C++, dan PHP.\nPyCharm: IDE yang dikembangkan oleh JetBrains untuk bahasa pemrograman Python. PyCharm menyediakan berbagai fitur seperti debugging, testing, dan refactoring untuk bahasa Python. Karena dikhususkan untuk bahasa Python, PyCharm sangat mudah digunakan, misalnya, ketika kita berurusan dengan beberapa environment sekaligus pada Python.\nWebStorm: IDE yang dikembangkan oleh JetBrains untuk bahasa pemrograman JavaScript dan TypeScript. IDE ini menyediakan berbagai fitur seperti debugging, testing, dan code completion.\n\nPada modul ini, kita akan menggunakan VSCode. Anda tentu dibolehkan untuk menggunakan IDE lain sesuai selera. Secara umum, fungsi-fungsi dasar dari IDE di atas sama, jadi Anda tidak akan kesulitan untuk mengikuti modul ini meskipun Anda menggunakan IDE yang lain.\n\n\nInstalasi VSCode\nSama seperti instalasi Docker yang memungkinkan kita untuk menggunakan installer pada Windows, instalasi VSCode juga dapat kita lakukan pada Windows, namun memungkinkan akses dari Linux pada WSL. Langkah untuk instalasi VSCode adalah sebagai berikut:\n\nUnduh instalasi VSCode dari sini, kemudian jalankan installer tersebut.\nSetelah selesai terinstall, VSCode dapat langsung dijalankan. Untuk menjalankan VSCode dari Windows, Anda dapat menggunakan Start Menu:\n\n\nIngat bahwa ini akan membuka VSCode di lingkungan Windows. Untuk membuka VSCode dari lingkungan WSL, kita dapat menggunakan perintah berikut pada folder yang akan dibuka:\n# Perhatikan tanda titik setelah 'code'. Titik ini berarti 'buka vscode di lokasi ini'\ncode .\nVSCode juga dapat diinstall dari Microsoft Store:\n\n\n\nBeberapa ekstensi yang berguna\nSalah satu keunggulan VSCode adalah ekosistem ekstensinya yang begitu luas. Terdapat ribuan ekstensi yang dapat kita gunakan untuk memudahkan kita dalam melakukan pembangunan aplikasi. Berikut adalah beberapa diantaranya:\n\nWSL. Anda memerlukan ekstensi ini untuk menghubungkan VSCode pada Windows dengan WSL. Cukup lakukan instalasi ekstensi ini, kemudian buka VSCode seperti biasa dari konsol WSL\nDocker. Sama seperti ekstensi WSL di atas, ekstensi Docker ini berguna untuk memudahkan integrasi Docker Desktop pada Windows dengan lingkungan Linux pada WSL.\nPrettier. Ekstensi ini memungkinkan Anda untuk merapikan kode secara otomatis. Hal ini penting untuk memudahkan kita membaca dan memahami kode kita sendiri\nGithub Copilot. Salah satu ekstensi yang paling berguna, karena kita dapat meminta CoPilot untuk menuliskan kode sesuai dengan yang kita inginkan. Copilot memerlukan lisensi edukasi yang dapat diakses dari Github Classroom\nBlackbox. Sebagai alternatif untuk Copilot, Anda dapat menggunakan Blackbox. Blackbox memiliki fitur yang sama seperti Copilot, akan tetapi tidak memerlukan lisensi edukasi khusus\n\nUntuk melakukan instalasi ekstensi pada VSCode, gunakan menu Extension Marketplace pada daftar menu di bagian kiri jendela VSCode. Cukup ketikkan nama ekstensi di atas, kemudian klik install.\n\nDengan demikian, kita telah melakukan instalasi untuk semua perangkat yang kita butuhkan pada modul ini. Di sub-bab selanjutnya kita akan mengenal dan menggunakan Git untuk version control system.\n\n\n\n“A river flows from mount merapi in Yogyakarta city, in the style of Dreamworks, artstation” (StableDiffusion)"
  }
]